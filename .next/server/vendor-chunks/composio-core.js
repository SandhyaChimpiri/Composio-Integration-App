/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/composio-core";
exports.ids = ["vendor-chunks/composio-core"];
exports.modules = {

/***/ "(rsc)/./node_modules/composio-core/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/composio-core/constants.js ***!
  \*************************************************/
/***/ ((module) => {

eval("const APPS = {\n  // apps list start here\n  // apps list end here\n};\n\nconst ACTIONS = {\n  // actions list start here\n  // actions list end here\n};\n\nconst COMPOSIO_VERSION = `0.5.35`;\n\nmodule.exports = {\n  APPS,\n  ACTIONS,\n  COMPOSIO_VERSION,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY29tcG9zaW8tY29yZS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXGNvbXBvLWFwcFxcaW50ZWdyYXRpb24tY29tcG9zaW9cXGNvbXBvc2lvLWRhc2hib2FyZFxcbm9kZV9tb2R1bGVzXFxjb21wb3Npby1jb3JlXFxjb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVBQUyA9IHtcbiAgLy8gYXBwcyBsaXN0IHN0YXJ0IGhlcmVcbiAgLy8gYXBwcyBsaXN0IGVuZCBoZXJlXG59O1xuXG5jb25zdCBBQ1RJT05TID0ge1xuICAvLyBhY3Rpb25zIGxpc3Qgc3RhcnQgaGVyZVxuICAvLyBhY3Rpb25zIGxpc3QgZW5kIGhlcmVcbn07XG5cbmNvbnN0IENPTVBPU0lPX1ZFUlNJT04gPSBgMC41LjM1YDtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFQUFMsXG4gIEFDVElPTlMsXG4gIENPTVBPU0lPX1ZFUlNJT04sXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/composio-core/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/composio-core/index.js":
/*!*********************************************!*\
  !*** ./node_modules/composio-core/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\nvar uuid = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\nvar z = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nvar clientAxios = __webpack_require__(/*! @hey-api/client-axios */ \"(rsc)/./node_modules/@hey-api/client-axios/dist/index.cjs\");\nvar zodToJsonSchema = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/cjs/index.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar pathModule = __webpack_require__(/*! path */ \"path\");\nvar tools = __webpack_require__(/*! @langchain/core/tools */ \"(rsc)/./node_modules/@langchain/core/tools.cjs\");\nvar ai = __webpack_require__(/*! ai */ \"(rsc)/./node_modules/ai/dist/index.js\");\n\nconst COMPOSIO_VERSION = `0.5.35`;\n\nconst getUUID = () => {\n    return uuid.v4();\n};\n\nfunction jsonSchemaPropertiesToTSTypes(value) {\n    if (!value.type) {\n        return z.object({});\n    }\n    let zodType;\n    switch (value.type) {\n        case \"string\":\n            zodType = z\n                .string()\n                .describe((value.description || \"\") +\n                (value.examples ? `\\nExamples: ${value.examples.join(\", \")}` : \"\"));\n            break;\n        case \"number\":\n            zodType = z\n                .number()\n                .describe((value.description || \"\") +\n                (value.examples ? `\\nExamples: ${value.examples.join(\", \")}` : \"\"));\n            break;\n        case \"integer\":\n            zodType = z\n                .number()\n                .int()\n                .describe((value.description || \"\") +\n                (value.examples ? `\\nExamples: ${value.examples.join(\", \")}` : \"\"));\n            break;\n        case \"boolean\":\n            zodType = z\n                .boolean()\n                .describe((value.description || \"\") +\n                (value.examples ? `\\nExamples: ${value.examples.join(\", \")}` : \"\"));\n            break;\n        case \"array\":\n            zodType = z\n                .array(jsonSchemaPropertiesToTSTypes(value.items))\n                .describe((value.description || \"\") +\n                (value.examples ? `\\nExamples: ${value.examples.join(\", \")}` : \"\"));\n            break;\n        case \"object\":\n            zodType = jsonSchemaToModel(value).describe((value.description || \"\") +\n                (value.examples ? `\\nExamples: ${value.examples.join(\", \")}` : \"\"));\n            break;\n        case \"null\":\n            zodType = z.null().describe(value.description || \"\");\n            break;\n        default:\n            throw new Error(`Unsupported JSON schema type: ${value.type}`);\n    }\n    return zodType;\n}\nfunction jsonSchemaToModel(jsonSchema) {\n    const properties = jsonSchema.properties;\n    const requiredFields = jsonSchema.required || [];\n    if (!properties) {\n        return z.object({});\n    }\n    const zodSchema = {};\n    for (const [key, _] of Object.entries(properties)) {\n        const value = _;\n        let zodType;\n        if (value.anyOf) {\n            const anyOfTypes = value.anyOf.map((schema) => jsonSchemaPropertiesToTSTypes(schema));\n            zodType = z\n                .union(anyOfTypes)\n                .describe((value.description || \"\") +\n                (value.examples\n                    ? `\\nExamples: ${value.examples.join(\", \")}`\n                    : \"\"));\n        }\n        else if (value.allOf) {\n            const allOfTypes = value.allOf.map((schema) => jsonSchemaPropertiesToTSTypes(schema));\n            zodType = z\n                .intersection(allOfTypes[0], allOfTypes\n                .slice(1)\n                .reduce((acc, schema) => acc.and(schema), allOfTypes[0]))\n                .describe((value.description || \"\") +\n                (value.examples\n                    ? `\\nExamples: ${value.examples.join(\", \")}`\n                    : \"\"));\n        }\n        else {\n            if (!value.type) {\n                value.type = \"string\";\n            }\n            zodType = jsonSchemaPropertiesToTSTypes(value);\n        }\n        if (value.description) {\n            zodType = zodType.describe(value.description);\n        }\n        if (requiredFields.includes(key)) {\n            zodSchema[key] = zodType;\n        }\n        else {\n            zodSchema[key] = zodType.optional();\n        }\n    }\n    return z.object(zodSchema);\n}\nconst getEnvVariable = (name, defaultValue = undefined) => {\n    try {\n        return process.env[name] || defaultValue;\n    }\n    catch (_e) {\n        return defaultValue;\n    }\n};\n\n// Define log levels with corresponding priorities\nconst LOG_LEVELS = {\n    silent: -1, // No logs\n    error: 0, // Highest priority - critical errors\n    warn: 1, // Warning messages\n    info: 2, // General information\n    debug: 3, // Debug information\n};\n/**\n * Get the current log level from environment variables.\n * Defaults to 'info' if not set or invalid.\n * @returns {keyof typeof LOG_LEVELS} The current log level\n */\nconst getLogLevel = () => {\n    var _a;\n    const envLevel = (_a = getEnvVariable(\"COMPOSIO_LOGGING_LEVEL\", \"info\")) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n    return envLevel && envLevel in LOG_LEVELS\n        ? envLevel\n        : \"info\";\n};\nconst addTimestampToMessage = (message) => {\n    const timestamp = new Date().toISOString();\n    return `${timestamp} - ${message}`;\n};\nconst formatErrorMessage = (args) => {\n    return args\n        .map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg))\n        .join(\" \");\n};\nconst getLogger = () => {\n    const logger = console;\n    const loggingLevel = getLogLevel();\n    const logLevelValue = LOG_LEVELS[loggingLevel];\n    const noop = () => { };\n    return {\n        error: logLevelValue >= LOG_LEVELS.error\n            ? (...args) => logger.error(addTimestampToMessage(formatErrorMessage(args)))\n            : noop,\n        warn: logLevelValue >= LOG_LEVELS.warn\n            ? (...args) => logger.warn(addTimestampToMessage(formatErrorMessage(args)))\n            : noop,\n        info: logLevelValue >= LOG_LEVELS.info\n            ? (...args) => logger.info(addTimestampToMessage(formatErrorMessage(args)))\n            : noop,\n        debug: logLevelValue >= LOG_LEVELS.debug\n            ? (...args) => logger.debug(addTimestampToMessage(formatErrorMessage(args)))\n            : noop,\n    };\n};\nvar logger = getLogger();\n\nconst ZAuthMode = z.z.enum([\n    \"OAUTH2\",\n    \"OAUTH1\",\n    \"OAUTH1A\",\n    \"API_KEY\",\n    \"BASIC\",\n    \"BEARER_TOKEN\",\n    \"GOOGLE_SERVICE_ACCOUNT\",\n    \"NO_AUTH\",\n    \"BASIC_WITH_JWT\",\n]);\nconst ZCreateIntegrationParams = z.z.object({\n    name: z.z.string(),\n    authScheme: ZAuthMode.optional(),\n    appUniqueKey: z.z.string().optional(),\n    appId: z.z.string().optional(),\n    forceNewIntegration: z.z.boolean().optional(),\n    authConfig: z.z\n        .union([\n        z.z.record(z.z.unknown()),\n        z.z.object({\n            client_id: z.z.string(),\n            client_secret: z.z.string(),\n            api_key: z.z.string(),\n            consumer_key: z.z.string(),\n            consumer_secret: z.z.string(),\n            base_url: z.z.string(),\n        }),\n    ])\n        .optional(),\n    useComposioAuth: z.z.boolean().optional(),\n});\nconst ZSingleIntegrationParams = z.z.object({\n    integrationId: z.z.string(),\n});\nconst ZListIntegrationsParams = z.z.object({\n    page: z.z.number().optional(),\n    pageSize: z.z.number().optional(),\n    appName: z.z.string().optional(),\n    appUniqueKey: z.z.string().optional(),\n    showDisabled: z.z.boolean().optional(),\n});\n\nconst ZExecuteActionParams$1 = z.z.object({\n    actionName: z.z.string(),\n    params: z.z.record(z.z.any()).optional(),\n    text: z.z.string().optional(),\n    connectedAccountId: z.z.string().optional(),\n});\nconst ZInitiateConnectionParams = z.z.object({\n    appName: z.z.string().optional(),\n    authConfig: z.z.record(z.z.any()).optional(),\n    integrationId: z.z.string().optional(),\n    authMode: ZAuthMode.optional(),\n    connectionParams: z.z.record(z.z.any()).optional(),\n    config: z.z\n        .object({\n        labels: z.z.array(z.z.string()).optional(),\n        redirectUrl: z.z.string().optional(),\n    })\n        .optional(),\n    redirectUri: z.z.string().optional(),\n    labels: z.z.array(z.z.string()).optional(),\n});\nconst ZConnectionParams = z.z.object({\n    connectedAccountId: z.z.string().optional(),\n    app: z.z.string().optional(),\n});\nconst ZTriggerSubscribeParam = z.z.object({\n    app: z.z.string().optional(),\n    appName: z.z.string().optional(),\n    triggerName: z.z.string(),\n    config: z.z.record(z.z.any()),\n});\n\n// Helper function to stringify objects if needed\nconst serializeValue = (obj) => {\n    return typeof obj === \"object\" ? JSON.stringify(obj) : obj;\n};\n\n// Constants\nconst COMPOSIO_DIR = \".composio\";\nconst USER_DATA_FILE_NAME = \"user_data.json\";\nconst TEMP_FILES_DIRECTORY_NAME = \"files\";\nconst DEFAULT_BASE_URL = \"https://backend.composio.dev\";\nconst TELEMETRY_URL = \"https://app.composio.dev\";\nconst IS_DEVELOPMENT_OR_CI = process.env.DEVELOPMENT || process.env.CI || false;\n\n/**\n * Sends a reporting payload to the telemetry server using a child process.\n * This function is intended for use in Node.js environments.\n *\n * @param {any} reportingPayload - The payload to be sent to the telemetry server.\n */\nfunction sendProcessReq(info) {\n    if (IS_DEVELOPMENT_OR_CI) {\n        logger.debug(`Hitting ${info.url}[${info.method}] with ${serializeValue(info.data)}`);\n        return true;\n    }\n    try {\n        const url = new URL(info.url);\n        const protocol = url.protocol === \"https:\" ? \"https\" : \"http\";\n        const port = url.port || (url.protocol === \"https:\" ? 443 : 80);\n        const args = [\n            \"-e\",\n            `\n      const http = require('${protocol}');\n      const options = {\n        hostname: '${url.hostname}',\n        path: '${url.pathname}${url.search}',\n        port: ${port},\n        method: '${info.method}',\n        headers: ${JSON.stringify(info.headers)}\n      };\n\n      const req = http.request(options, (res) => {\n        res.on('data', () => {});\n        res.on('end', () => {\n          process.exit(0);\n        });\n      });\n\n      req.on('error', () => {\n        process.exit(0);\n      });\n\n      req.write(JSON.stringify(${JSON.stringify(info.data)}));\n      req.end();\n      `,\n        ];\n        // Use spawn with detached option instead of spawnSync to make it non-blocking\n        const { spawn } = __webpack_require__(/*! child_process */ \"child_process\");\n        spawn(\"node\", args, {\n            stdio: \"ignore\",\n            detached: true,\n            shell: false,\n        }).unref();\n        return true;\n    }\n    catch (error) {\n        logger.debug(\"Error sending error to telemetry\", error);\n        // DO NOTHING\n    }\n}\n/**\n * Sends a reporting payload to the telemetry server using XMLHttpRequest.\n * This function is intended for use in browser environments.\n *\n * @param {any} reportingPayload - The payload to be sent to the telemetry server.\n */\nfunction sendBrowserReq(info) {\n    if (IS_DEVELOPMENT_OR_CI) {\n        logger.debug(`Hitting ${info.url}[${info.method}] with ${serializeValue(info.data)}`);\n        return true;\n    }\n    try {\n        // Create a new XMLHttpRequest object\n        const xhr = new XMLHttpRequest();\n        // Open a new POST request to the telemetry server\n        xhr.open(info.method, info.url, true);\n        // Set the request header to indicate JSON content\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        Object.entries(info.headers || {}).forEach(([key, value]) => {\n            xhr.setRequestHeader(key, value);\n        });\n        // Define the onload event handler\n        xhr.onload = function () {\n            // Log the response if the request was successful\n            if (xhr.status === 200) {\n                logger.debug(xhr.response);\n            }\n        };\n        // Send the reporting payload as a JSON string\n        xhr.send(JSON.stringify(info.data));\n    }\n    catch (error) {\n        logger.debug(\"Error sending error to telemetry\", error);\n        // DO NOTHING\n    }\n}\n\n/*\n    ComposioContext class provides a global context for storing SDK configuration.\n    This singleton class maintains essential SDK settings like API key and base URL.\n    It is used to store the API key and base URL in a global context so that it can be accessed by other modules without having to pass the configuration around.\n\n    Warning: Can cause problems if there are multiple instances of the SDK running in the same process.\n*/\nclass ComposioSDKContext {\n}\nComposioSDKContext.source = \"javascript\";\n\nasync function logError(payload) {\n    const isTelemetryDisabled = getEnvVariable(\"TELEMETRY_DISABLED\", \"false\") === \"true\";\n    if (isTelemetryDisabled) {\n        return;\n    }\n    try {\n        const isBrowser = typeof window !== \"undefined\";\n        const reportingPayload = generateReportingPayload(payload);\n        const reqPayload = {\n            data: reportingPayload,\n            url: `${TELEMETRY_URL}/api/sdk_metrics/error`,\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        };\n        if (isBrowser) {\n            await sendBrowserReq(reqPayload);\n        }\n        else {\n            await sendProcessReq(reqPayload);\n        }\n    }\n    catch (error) {\n        logger.debug(\"Error sending error to telemetry\", error);\n        // DO NOTHING\n    }\n}\nfunction generateReportingPayload(payload) {\n    const { apiKey, baseURL, composioVersion, frameworkRuntime, source } = ComposioSDKContext;\n    const { error_id, error_code, description, message, possible_fix, original_error, current_stack, } = payload;\n    return {\n        error_id,\n        error_code,\n        description,\n        error_message: message,\n        possible_fix,\n        original_error,\n        current_stack,\n        sdk_meta: {\n            platform: process.platform,\n            version: composioVersion,\n            baseURL,\n            apiKey,\n            frameworkRuntime,\n            source,\n        },\n    };\n}\n\n/**\n * Custom error class for Composio that provides rich error details, tracking, and improved debugging\n */\nclass ComposioError extends Error {\n    constructor(errCode, message, description, possibleFix, metadata, originalError) {\n        var _a;\n        // Ensure message is never empty\n        super(message || \"An unknown error occurred\");\n        // additional metadata about the error\n        this.metadata = {};\n        // Ensure proper prototype chain for instanceof checks\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = \"ComposioError\";\n        this.errCode = errCode;\n        this.description = description;\n        this.possibleFix = possibleFix;\n        this.timestamp = new Date().toISOString();\n        this.metadata = metadata;\n        this.errorId = getUUID();\n        let originalErrorString = \"\";\n        // Only print original error if COMPOSIO_LOGGING_LEVEL is debug\n        if (originalError) {\n            try {\n                originalErrorString =\n                    typeof originalError === \"object\"\n                        ? JSON.parse(JSON.stringify(originalError))\n                        : originalError;\n            }\n            catch (_e) {\n                originalErrorString = String(originalError);\n            }\n            if (getLogLevel() === \"debug\") {\n                this._originalError = originalErrorString;\n            }\n        }\n        // Only in case of info or debug, we will log the error\n        if (LOG_LEVELS[getLogLevel()] >= 2) {\n            logger.info(`🚀 [Info] Give Feedback / Get Help: https://dub.composio.dev/discord `);\n            logger.info(`🐛 [Info] Create a new issue: https://github.com/ComposioHQ/composio/issues `);\n            if (getLogLevel() !== \"debug\") {\n                logger.info(`⛔ [Info] If you need to debug this error, set env variable COMPOSIO_LOGGING_LEVEL=debug`);\n            }\n        }\n        logError({\n            error_id: this.errorId,\n            error_code: this.errCode,\n            original_error: originalErrorString,\n            description: this.description || \"\",\n            metadata: this.metadata || {},\n            message: this.message,\n            possible_fix: this.possibleFix || \"\",\n            current_stack: ((_a = this.stack) === null || _a === void 0 ? void 0 : _a.split(\"\\n\")) || [],\n        });\n        // Capture stack trace, excluding constructor call\n        Error.captureStackTrace(this, this.constructor);\n    }\n    get originalError() {\n        return this._originalError;\n    }\n    /**\n     * Returns a complete object representation for logging/serialization\n     * Includes all error details and metadata\n     */\n    toJSON() {\n        var _a, _b, _c;\n        const errorObj = {\n            name: this.name,\n            errorId: this.errorId,\n            code: this.errCode,\n            message: this.message,\n            description: this.description,\n            possibleFix: this.possibleFix,\n            timestamp: this.timestamp,\n            stack: (_a = this.stack) === null || _a === void 0 ? void 0 : _a.split(\"\\n\"),\n            originalStack: (_c = (_b = this.originalError) === null || _b === void 0 ? void 0 : _b.stack) === null || _c === void 0 ? void 0 : _c.split(\"\\n\"),\n        };\n        // Remove undefined/null properties\n        return Object.entries(errorObj).reduce((acc, [key, value]) => {\n            if (value !== undefined && value !== null) {\n                acc[key] = value;\n            }\n            return acc;\n        }, {});\n    }\n}\n\nconst COMPOSIO_SDK_ERROR_CODES = {\n    BACKEND: {\n        NOT_FOUND: \"BACKEND::NOT_FOUND\",\n        RATE_LIMIT: \"BACKEND::RATE_LIMIT\",\n        BAD_REQUEST: \"BACKEND::BAD_REQUEST\",\n        UNAUTHORIZED: \"BACKEND::UNAUTHORIZED\",\n        SERVER_ERROR: \"BACKEND::SERVER_ERROR\",\n        SERVER_UNAVAILABLE: \"BACKEND::SERVER_UNAVAILABLE\",\n        SERVER_UNREACHABLE: \"BACKEND::SERVER_UNREACHABLE\",\n        UNKNOWN: \"BACKEND::UNKNOWN\",\n    },\n    COMMON: {\n        API_KEY_UNAVAILABLE: \"COMMON::API_KEY_INVALID\",\n        BASE_URL_NOT_REACHABLE: \"COMMON::BASE_URL_NOT_REACHABLE\",\n        UNKNOWN: \"COMMON::ERROR_CODE_NOT_DEFINED\",\n        SERVER_UNAVAILABLE: \"COMMON::SERVER_UNAVAILABLE\",\n        REQUEST_TIMEOUT: \"COMMON::REQUEST_TIMEOUT\",\n        REQUEST_ABORTED: \"COMMON::REQUEST_ABORTED\",\n        INVALID_PARAMS_PASSED: \"COMMON::INVALID_PARAMS_PASSED\",\n    },\n    SDK: {\n        NO_CONNECTED_ACCOUNT_FOUND: \"SDK::NO_CONNECTED_ACCOUNT_FOUND\",\n        FAILED_TO_INITIATE_CONNECTION: \"SDK::FAILED_TO_INITIATE_CONNECTION\",\n        INVALID_PARAMETER: \"SDK::INVALID_PARAMETER\",\n    },\n};\nconst BASE_ERROR_CODE_INFO = {\n    [COMPOSIO_SDK_ERROR_CODES.BACKEND.NOT_FOUND]: {\n        message: \"🔍 API not found\",\n        description: \"The requested resource is missing\",\n        possibleFix: \"Ensure the resource id or resource identifier is correct and valid as backend returned 404\",\n    },\n    [COMPOSIO_SDK_ERROR_CODES.BACKEND.BAD_REQUEST]: {\n        message: \"🚫 Bad Request. The request was malformed or incorrect\",\n        description: null,\n        possibleFix: \"Check your parameters and request format, as the backend returned a 400 error.\",\n    },\n    [COMPOSIO_SDK_ERROR_CODES.BACKEND.UNAUTHORIZED]: {\n        message: \"🔑 Access Denied\",\n        description: \"You do not have the necessary credentials.\",\n        possibleFix: \"Ensure your API key is correct and has the required permissions.\",\n    },\n    [COMPOSIO_SDK_ERROR_CODES.COMMON.REQUEST_TIMEOUT]: {\n        message: \"🕒 Request Timeout\",\n        description: \"The request timed out while waiting for a response.\",\n        possibleFix: \"Please try again later. If the issue persists, contact support or check your network connection.\",\n    },\n    [COMPOSIO_SDK_ERROR_CODES.BACKEND.SERVER_ERROR]: {\n        message: \"💥 Oops! Internal server error\",\n        description: \"Your request could not be processed due to an internal server error.\",\n        possibleFix: \"Please try again later. If the issue persists, contact support.\",\n    },\n    [COMPOSIO_SDK_ERROR_CODES.BACKEND.RATE_LIMIT]: {\n        message: \"⏱️ API Rate Limit Exceeded\",\n        description: \"You have exceeded the rate limit for requests.\",\n        possibleFix: \"Please wait a bit before trying your request again.\",\n    },\n    [COMPOSIO_SDK_ERROR_CODES.COMMON.API_KEY_UNAVAILABLE]: {\n        message: \"🔑 API Key Missing or Invalid\",\n        description: \"The API key provided is missing or incorrect.\",\n        possibleFix: \"Ensure that your API key is passed to client or set in COMPOSIO_API_KEY environment variable.\",\n    },\n    [COMPOSIO_SDK_ERROR_CODES.BACKEND.SERVER_UNAVAILABLE]: {\n        message: \"🚫 Server Unavailable\",\n        description: \"The server is currently unable to handle the request.\",\n        possibleFix: \"Please try again later. If the issue persists, contact support.\",\n    },\n    [COMPOSIO_SDK_ERROR_CODES.COMMON.BASE_URL_NOT_REACHABLE]: {\n        message: \"🔗 Base URL is not valid\",\n        description: \"The base URL provided is not valid.\",\n        possibleFix: \"Ensure that the base URL is correct and accessible.\",\n    },\n    [COMPOSIO_SDK_ERROR_CODES.COMMON.INVALID_PARAMS_PASSED]: {\n        message: \"🕒 Invalid parameters passed\",\n        description: \"The parameters passed are invalid\",\n        possibleFix: \"Please check the error message for more details\",\n    },\n    UNKNOWN: {\n        message: null,\n        description: null,\n        possibleFix: \"Contact our support team with the error details for further assistance.\",\n    },\n    [COMPOSIO_SDK_ERROR_CODES.BACKEND.UNKNOWN]: {\n        message: null,\n        description: null,\n        possibleFix: \"Contact our support team with the error details for further assistance.\",\n    },\n};\nconst API_TO_SDK_ERROR_CODE = {\n    400: COMPOSIO_SDK_ERROR_CODES.BACKEND.BAD_REQUEST,\n    401: COMPOSIO_SDK_ERROR_CODES.BACKEND.UNAUTHORIZED,\n    404: COMPOSIO_SDK_ERROR_CODES.BACKEND.NOT_FOUND,\n    408: COMPOSIO_SDK_ERROR_CODES.COMMON.REQUEST_TIMEOUT,\n    429: COMPOSIO_SDK_ERROR_CODES.BACKEND.RATE_LIMIT,\n    500: COMPOSIO_SDK_ERROR_CODES.BACKEND.SERVER_ERROR,\n    502: COMPOSIO_SDK_ERROR_CODES.BACKEND.SERVER_UNAVAILABLE,\n};\n\nconst getAPIErrorDetails = (axiosError) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n    const statusCode = (_a = axiosError.response) === null || _a === void 0 ? void 0 : _a.status;\n    const errorCode = statusCode\n        ? API_TO_SDK_ERROR_CODE[statusCode]\n        : COMPOSIO_SDK_ERROR_CODES.BACKEND.UNKNOWN;\n    const predefinedError = BASE_ERROR_CODE_INFO[errorCode];\n    const defaultErrorDetails = {\n        message: axiosError.message,\n        description: ((_c = (_b = axiosError === null || axiosError === void 0 ? void 0 : axiosError.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.message) || axiosError.message,\n        possibleFix: \"Please check the parameters you are passing to the API\",\n    };\n    const metadata = generateMetadataFromAxiosError(axiosError);\n    const errorNameFromBE = (_e = (_d = axiosError === null || axiosError === void 0 ? void 0 : axiosError.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.name;\n    const errorTypeFromBE = (_g = (_f = axiosError === null || axiosError === void 0 ? void 0 : axiosError.response) === null || _f === void 0 ? void 0 : _f.data) === null || _g === void 0 ? void 0 : _g.type;\n    const errorMessage = (_j = (_h = axiosError === null || axiosError === void 0 ? void 0 : axiosError.response) === null || _h === void 0 ? void 0 : _h.data) === null || _j === void 0 ? void 0 : _j.message;\n    let genericMessage = \"\";\n    const hasNotReceivedResponseFromBE = errorCode === COMPOSIO_SDK_ERROR_CODES.BACKEND.UNAUTHORIZED ||\n        errorCode === COMPOSIO_SDK_ERROR_CODES.BACKEND.RATE_LIMIT ||\n        errorCode === COMPOSIO_SDK_ERROR_CODES.BACKEND.SERVER_UNAVAILABLE ||\n        errorCode === COMPOSIO_SDK_ERROR_CODES.BACKEND.SERVER_UNREACHABLE;\n    if (hasNotReceivedResponseFromBE) {\n        genericMessage = predefinedError.message;\n    }\n    else if (((_k = axiosError.config) === null || _k === void 0 ? void 0 : _k.baseURL) && ((_l = axiosError.config) === null || _l === void 0 ? void 0 : _l.url)) {\n        genericMessage = `${errorNameFromBE || predefinedError.message} ${errorTypeFromBE ? `- ${errorTypeFromBE}` : \"\"} on ${((_m = axiosError.config) === null || _m === void 0 ? void 0 : _m.baseURL) + ((_o = axiosError.config) === null || _o === void 0 ? void 0 : _o.url)}`;\n    }\n    switch (errorCode) {\n        case COMPOSIO_SDK_ERROR_CODES.BACKEND.BAD_REQUEST:\n            const validationErrors = (_q = (_p = axiosError.response) === null || _p === void 0 ? void 0 : _p.data) === null || _q === void 0 ? void 0 : _q.details;\n            const formattedErrors = Array.isArray(validationErrors)\n                ? validationErrors.map((err) => JSON.stringify(err)).join(\", \")\n                : JSON.stringify(validationErrors);\n            return {\n                message: genericMessage,\n                description: `Validation Errors: ${formattedErrors}`,\n                possibleFix: \"Please check the request parameters and ensure they are correct.\",\n                metadata,\n            };\n        case COMPOSIO_SDK_ERROR_CODES.BACKEND.NOT_FOUND:\n        case COMPOSIO_SDK_ERROR_CODES.BACKEND.UNAUTHORIZED:\n        case COMPOSIO_SDK_ERROR_CODES.BACKEND.SERVER_ERROR:\n        case COMPOSIO_SDK_ERROR_CODES.BACKEND.SERVER_UNAVAILABLE:\n        case COMPOSIO_SDK_ERROR_CODES.BACKEND.RATE_LIMIT:\n        case COMPOSIO_SDK_ERROR_CODES.BACKEND.UNKNOWN:\n            return {\n                message: genericMessage,\n                description: errorMessage || predefinedError.description,\n                possibleFix: predefinedError.possibleFix ||\n                    defaultErrorDetails.possibleFix,\n                metadata,\n            };\n        default:\n            const message = genericMessage || axiosError.message;\n            const description = errorMessage || predefinedError.description;\n            const possibleFix = predefinedError.possibleFix ||\n                defaultErrorDetails.possibleFix ||\n                \"\";\n            return {\n                message,\n                description,\n                possibleFix,\n                metadata,\n            };\n    }\n};\nconst generateMetadataFromAxiosError = (axiosError) => {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const { requestId, ...restMetadata } = axiosError.metadata || {};\n    return {\n        fullUrl: ((_b = (_a = axiosError.config) === null || _a === void 0 ? void 0 : _a.baseURL) !== null && _b !== void 0 ? _b : \"\") + ((_d = (_c = axiosError.config) === null || _c === void 0 ? void 0 : _c.url) !== null && _d !== void 0 ? _d : \"\"),\n        method: ((_f = (_e = axiosError.config) === null || _e === void 0 ? void 0 : _e.method) !== null && _f !== void 0 ? _f : \"\").toUpperCase(),\n        statusCode: (_g = axiosError.response) === null || _g === void 0 ? void 0 : _g.status,\n        requestId: requestId ? `${requestId}` : undefined,\n        metadata: restMetadata,\n    };\n};\n\nclass CEG {\n    static handleAllError(error, shouldThrow = false) {\n        if (error instanceof ComposioError) {\n            if (shouldThrow) {\n                throw error;\n            }\n            return error;\n        }\n        if (!(error instanceof Error)) {\n            const error = new Error(\"Passed error is not an instance of Error\");\n            if (shouldThrow) {\n                throw error;\n            }\n            return error;\n        }\n        if (error instanceof z.ZodError) {\n            const zodError = this.returnZodError(error);\n            if (shouldThrow) {\n                throw zodError;\n            }\n            return zodError;\n        }\n        const isAxiosError = error.isAxiosError;\n        if (!isAxiosError) {\n            const customError = this.getCustomError(COMPOSIO_SDK_ERROR_CODES.COMMON.UNKNOWN, {\n                message: error.message,\n                description: \"\",\n                possibleFix: \"Please check error message and stack trace\",\n                originalError: error,\n                metadata: {},\n            });\n            if (shouldThrow) {\n                throw customError;\n            }\n            return customError;\n        }\n        else {\n            const isResponseNotPresent = !(\"response\" in error);\n            if (isResponseNotPresent) {\n                const nonResponseError = this.handleNonResponseAxiosError(error);\n                if (shouldThrow) {\n                    throw nonResponseError;\n                }\n                return nonResponseError;\n            }\n            const apiError = this.throwAPIError(error);\n            if (shouldThrow) {\n                throw apiError;\n            }\n            return apiError;\n        }\n    }\n    static handleNonResponseAxiosError(error) {\n        var _a, _b;\n        const fullUrl = (((_a = error.config) === null || _a === void 0 ? void 0 : _a.baseURL) || \"\") + (((_b = error.config) === null || _b === void 0 ? void 0 : _b.url) || \"\");\n        const metadata = generateMetadataFromAxiosError(error);\n        if (error.code === \"ECONNREFUSED\") {\n            throw new ComposioError(COMPOSIO_SDK_ERROR_CODES.COMMON.BASE_URL_NOT_REACHABLE, `ECONNREFUSED for ${fullUrl}`, \"\", \"Make sure:\\n1. The base URL is correct and is accessible\\n2. Your network connection is stable\\n3. There are no firewall rules blocking the connection\", metadata, error);\n        }\n        if (error.code === \"ETIMEDOUT\") {\n            throw new ComposioError(COMPOSIO_SDK_ERROR_CODES.COMMON.REQUEST_TIMEOUT, `ECONNABORTED for ${fullUrl}`, `Request to ${fullUrl} timed out after the configured timeout period. This could be due to slow network conditions, server performance issues, or the request being too large. Error code: ETIMEDOUT`, \"Try:\\n1. Checking your network speed and stability\\n2. Increasing the request timeout setting if needed\\n3. Breaking up large requests into smaller chunks\\n4. Retrying the request when network conditions improve\\n5. Contact tech@composio.dev if the issue persists\", metadata, error);\n        }\n        if (error.code === \"ECONNABORTED\") {\n            throw new ComposioError(COMPOSIO_SDK_ERROR_CODES.COMMON.REQUEST_ABORTED, error.message, \"The request was aborted due to a timeout or other network-related issues. This could be due to network instability, server issues, or the request being too large. Error code: ECONNABORTED\", \"Try:\\n1. Checking your network speed and stability\\n2. Increasing the request timeout setting if needed\\n3. Breaking up large requests into smaller chunks\\n4. Retrying the request when network conditions improve\\n5. Contact tech@composio.dev if the issue persists\", metadata, error);\n        }\n        throw new ComposioError(COMPOSIO_SDK_ERROR_CODES.BACKEND.SERVER_UNREACHABLE, error.message ||\n            \"Server is unreachable. Please contact tech@composio.dev with the error details.\", \"Server is unreachable. Please contact tech@composio.dev with the error details.\", \"Please contact tech@composio.dev with the error details.\", metadata, error);\n    }\n    static throwAPIError(error) {\n        var _a;\n        const statusCode = ((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) || null;\n        const errorCode = statusCode\n            ? API_TO_SDK_ERROR_CODE[statusCode] ||\n                COMPOSIO_SDK_ERROR_CODES.BACKEND.UNKNOWN\n            : COMPOSIO_SDK_ERROR_CODES.BACKEND.UNKNOWN;\n        const errorDetails = getAPIErrorDetails(error);\n        const metadata = generateMetadataFromAxiosError(error);\n        throw new ComposioError(errorCode, errorDetails.message, errorDetails.description, errorDetails.possibleFix, metadata, error);\n    }\n    static returnZodError(error) {\n        const errorCode = COMPOSIO_SDK_ERROR_CODES.COMMON.INVALID_PARAMS_PASSED;\n        const errorMessage = error.message;\n        const errorDescription = \"The parameters passed are invalid\";\n        const possibleFix = \"Please check error message for more details\";\n        const metadata = {\n            issues: error.issues,\n        };\n        return new ComposioError(errorCode, errorMessage, errorDescription, possibleFix, metadata, error);\n    }\n    static getCustomError(messageCode, { message, type, subtype, description, possibleFix, originalError, metadata, }) {\n        const finalErrorCode = !!messageCode ? messageCode : `${type}::${subtype}`;\n        const errorDetails = BASE_ERROR_CODE_INFO[finalErrorCode] || BASE_ERROR_CODE_INFO.UNKNOWN;\n        const finalMessage = message || errorDetails.message || \"\";\n        const finalDescription = description || errorDetails.description || undefined;\n        const finalPossibleFix = possibleFix || errorDetails.possibleFix || \"\";\n        throw new ComposioError(messageCode, finalMessage, finalDescription, finalPossibleFix, metadata, originalError);\n    }\n}\n\nclass BatchProcessor {\n    constructor(time = 2000, batchSize = 100, processBatchCallback) {\n        this.batch = [];\n        this.timer = null;\n        this.batch = [];\n        this.time = time;\n        this.batchSize = batchSize;\n        this.processBatchCallback = processBatchCallback;\n    }\n    pushItem(item) {\n        this.batch.push(item);\n        if (this.batch.length >= this.batchSize) {\n            this.processBatch();\n        }\n        else if (!this.timer) {\n            this.timer = setTimeout(() => this.processBatch(), this.time);\n        }\n    }\n    processBatch() {\n        if (this.batch.length > 0) {\n            this.processBatchCallback(this.batch);\n            this.batch = [];\n        }\n        if (this.timer) {\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n    }\n}\n\nvar _a;\nclass TELEMETRY_LOGGER {\n    static createTelemetryWrapper(method, className) {\n        return async (...args) => {\n            const payload = {\n                eventName: method.name,\n                data: { className, args },\n                sdk_meta: {\n                    apiKey: ComposioSDKContext.apiKey,\n                    baseURL: ComposioSDKContext.baseURL,\n                    composioVersion: ComposioSDKContext.composioVersion,\n                    frameworkRuntime: ComposioSDKContext.frameworkRuntime,\n                    source: ComposioSDKContext.source,\n                    sessionId: ComposioSDKContext.sessionId,\n                    isBrowser: typeof window !== \"undefined\",\n                },\n            };\n            _a.batchProcessor.pushItem(payload);\n            return method(...args);\n        };\n    }\n    static async sendTelemetry(payload) {\n        const isTelemetryDisabled = getEnvVariable(\"TELEMETRY_DISABLED\", \"false\") === \"true\";\n        if (isTelemetryDisabled) {\n            return;\n        }\n        const url = `${TELEMETRY_URL}/api/sdk_metrics/telemetry`;\n        const reqPayload = {\n            data: payload,\n            url,\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n        };\n        const isBrowser = typeof window !== \"undefined\";\n        if (isBrowser) {\n            await sendBrowserReq(reqPayload);\n        }\n        else {\n            await sendProcessReq(reqPayload);\n        }\n    }\n    static manualTelemetry(eventName, data) {\n        const payload = {\n            eventName,\n            data,\n            sdk_meta: {\n                apiKey: ComposioSDKContext.apiKey,\n                baseURL: ComposioSDKContext.baseURL,\n                composioVersion: ComposioSDKContext.composioVersion,\n                frameworkRuntime: ComposioSDKContext.frameworkRuntime,\n                source: ComposioSDKContext.source,\n                isBrowser: typeof window !== \"undefined\",\n            },\n        };\n        _a.batchProcessor.pushItem(payload);\n    }\n    static wrapFunctionForTelemetry(func, className) {\n        return _a.createTelemetryWrapper(func, className);\n    }\n}\n_a = TELEMETRY_LOGGER;\nTELEMETRY_LOGGER.batchProcessor = new BatchProcessor(100, 10, async (data) => {\n    await _a.sendTelemetry(data);\n});\n\nvar TELEMETRY_EVENTS;\n(function (TELEMETRY_EVENTS) {\n    TELEMETRY_EVENTS[\"SDK_INITIALIZED\"] = \"SDK_INITIALIZED\";\n    TELEMETRY_EVENTS[\"SDK_METHOD_INVOKED\"] = \"SDK_METHOD_INVOKED\";\n    TELEMETRY_EVENTS[\"CLI_INVOKED\"] = \"CLI_INVOKED\";\n})(TELEMETRY_EVENTS || (TELEMETRY_EVENTS = {}));\n\n// This file is auto-generated by @hey-api/openapi-ts\nconst client = clientAxios.createClient(clientAxios.createConfig());\nclass ClientService {\n    /**\n     * Get user info\n     * Get client info\n     */\n    static getUserInfo(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/client/auth/client_info\",\n        });\n    }\n    /**\n     * Add new project\n     * Add a new project to the client's organization\n     */\n    static addProject(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v1/client/auth/project/add\",\n        });\n    }\n    /**\n     * Delete project\n     * Delete a project from the client's organization\n     */\n    static deleteProject(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).delete({\n            ...options,\n            url: \"/api/v1/client/auth/project/delete/{projectId}\",\n        });\n    }\n    /**\n     * Get projects\n     */\n    static getProjects(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/client/auth/projects\",\n        });\n    }\n    /**\n     * Get org api key\n     */\n    static getOrgApiKey(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/client/auth/org/api_key\",\n        });\n    }\n    /**\n     * Regenerate org api key\n     */\n    static regenerateOrgApiKey(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v1/client/auth/org/api_key/regenerate\",\n        });\n    }\n}\nclass ApiKeysService {\n    /**\n     * Generate api key\n     */\n    static generateApiKey(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v1/api_keys\",\n        });\n    }\n    /**\n     * List api keys\n     */\n    static listApiKeys(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/api_keys\",\n        });\n    }\n    /**\n     * Delete api key\n     */\n    static deleteApiKey(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).delete({\n            ...options,\n            url: \"/api/v1/api_keys/{id}\",\n        });\n    }\n}\nclass AppsService {\n    /**\n     * List app categories\n     * List of available app categories, can be used to filter apps.\n     */\n    static listAppCategories(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/apps/list/categories\",\n        });\n    }\n    /**\n     * List app enums\n     * List app enums\n     */\n    static listAppEnums(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/apps/list/enums\",\n        });\n    }\n    /**\n     * List apps\n     * List all apps based on the given filters, if any. This will return all available apps if no filters are provided.\n     */\n    static getApps(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/apps\",\n        });\n    }\n    /**\n     * Get single app\n     * Get app details\n     */\n    static getApp(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/apps/{appName}\",\n        });\n    }\n}\nclass IntegrationsService {\n    /**\n     * Create connector\n     * Create a new connector\n     */\n    static createConnector(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v1/integrations\",\n        });\n    }\n    /**\n     * List all connectors\n     * List all connectors\n     */\n    static listAllConnectors(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/integrations\",\n        });\n    }\n    /**\n     * Get connector info\n     * Get connector info\n     */\n    static getConnectorInfo(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/integrations/{integrationId}\",\n        });\n    }\n    /**\n     * Modify connector\n     * Modify a connector\n     */\n    static modifyConnector(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).patch({\n            ...options,\n            url: \"/api/v1/integrations/{integrationId}\",\n        });\n    }\n    /**\n     * Delete connector\n     * Delete a connector\n     */\n    static deleteConnector(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).delete({\n            ...options,\n            url: \"/api/v1/integrations/{integrationId}\",\n        });\n    }\n}\nclass ActionsService {\n    /**\n     * List action enums\n     * List action enums\n     */\n    static listActionEnums(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/actions/list/enums\",\n        });\n    }\n    /**\n     * List action tags\n     * List all the action tags available in composio\n     */\n    static listActionTags(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v2/actions/list/tags\",\n        });\n    }\n    /**\n     * List action enums\n     * List action enums\n     */\n    static listActionEnums1(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v2/actions/list/enums\",\n        });\n    }\n    /**\n     * List actions with complete details\n     * List and filter all the actions available in composio, with all the details needed for manual action execution or through function-calling.\n     */\n    static listActionsV2(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v2/actions\",\n        });\n    }\n    /**\n     * List actions\n     * Retrieve a list of all actions based on query parameters.\n     */\n    static listActionsMinimalV2(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v2/actions/list/all\",\n        });\n    }\n    /**\n     * Execute an action\n     * Execute an action. Support both connected account and no auth auth.\n     */\n    static executeActionV2(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v2/actions/{actionId}/execute\",\n        });\n    }\n    /**\n     * Get action inputs\n     * Get the inputs for an action with NLA\n     */\n    static getActionInputsV2(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v2/actions/{actionId}/execute/get.inputs\",\n        });\n    }\n    /**\n     * Get single action\n     * Get action details, including the input and response schema. This is very useful for setting upfunction/tool calling with composio actions.\n     */\n    static getActionV2(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v2/actions/{actionId}\",\n        });\n    }\n    /**\n     * Execute with HTTP Client\n     * Use composio as a http client to make request to the connected account service on your behalf, without managing authentication on your side.\n     */\n    static executeWithHttpClient(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v2/actions/proxy\",\n        });\n    }\n    /**\n     * Advanced use case search\n     * Perform use case search.\n     */\n    static advancedUseCaseSearch(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v2/actions/search/advanced\",\n        });\n    }\n    /**\n     * List user files\n     */\n    static v2ListUserFiles(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v2/actions/files/list\",\n        });\n    }\n    /**\n     * Create file upload url\n     * Create file upload URL for action execution.\n     */\n    static createFileUploadUrl(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v2/actions/files/upload/{fileType}\",\n        });\n    }\n}\nclass ConnectionsService {\n    /**\n     * List connections\n     * Get all connections in the current project.\n     */\n    static listConnections(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/connectedAccounts\",\n        });\n    }\n    /**\n     * Initiate connection\n     */\n    static initiateConnection(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v1/connectedAccounts\",\n        });\n    }\n    /**\n     * Update connection data\n     * Update connection data\n     */\n    static updateConnectionData(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).patch({\n            ...options,\n            url: \"/api/v1/connectedAccounts/{connectedAccountId}/data\",\n        });\n    }\n    /**\n     * Reinitiate connection\n     * Reinitiate an existing connection to get new credentials\n     */\n    static reinitiateConnection(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v1/connectedAccounts/{connectedAccountId}/reinitiate\",\n        });\n    }\n    /**\n     * Get single connection\n     */\n    static getConnection(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/connectedAccounts/{connectedAccountId}\",\n        });\n    }\n    /**\n     * Delete connection\n     * Delete a connection\n     */\n    static deleteConnection(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).delete({\n            ...options,\n            url: \"/api/v1/connectedAccounts/{connectedAccountId}\",\n        });\n    }\n    /**\n     * Get Auth credentials\n     * Get authentication crdentials for the connected account, i.e all the headers, query parameters, etc. that are required to make requests to the third-party service directly.\n     */\n    static getConnectionInfo(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/connectedAccounts/{connectedAccountId}/info\",\n        });\n    }\n    /**\n     * Disable connection\n     * Disable a connection\n     */\n    static disableConnection(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v1/connectedAccounts/{connectedAccountId}/disable\",\n        });\n    }\n    /**\n     * Enable connection\n     * Enable a connection\n     */\n    static enableConnection(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v1/connectedAccounts/{connectedAccountId}/enable\",\n        });\n    }\n}\nclass TriggersService {\n    /**\n     * List triggers\n     * List triggers\n     */\n    static listTriggers(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/triggers\",\n        });\n    }\n    /**\n     * List trigger enums\n     * List trigger enums\n     */\n    static listTriggerEnums(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/triggers/list/enums\",\n        });\n    }\n    /**\n     * Update new webhook\n     * Update isNewWebhook\n     */\n    static updateNewWebhook(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v1/triggers/update_webhook_format\",\n        });\n    }\n    /**\n     * Enable trigger\n     * Enables a trigger for a connected account and specific trigger name.\n     */\n    static enableTrigger(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v1/triggers/enable/{connectedAccountId}/{triggerName}\",\n        });\n    }\n    /**\n     * Get active triggers\n     * Lists active triggers based on query parameters.\n     */\n    static getActiveTriggers(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/triggers/active_triggers\",\n        });\n    }\n    /**\n     * Switch trigger instance status\n     * Switches the status of a trigger instance.\n     */\n    static switchTriggerInstanceStatus(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).patch({\n            ...options,\n            url: \"/api/v1/triggers/instance/{triggerId}/status\",\n        });\n    }\n    /**\n     * Disable trigger\n     * Disables a specified trigger instance.\n     */\n    static disableTrigger(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v1/triggers/disable/{triggerInstanceId}\",\n        });\n    }\n    /**\n     * Delete trigger\n     * Deletes a specified trigger instance.\n     */\n    static deleteTrigger(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).delete({\n            ...options,\n            url: \"/api/v1/triggers/instance/{triggerInstanceId}\",\n        });\n    }\n    /**\n     * Set callback url\n     * Sets a universal callback URL for the client.\n     */\n    static setCallbackUrl(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v1/triggers/set_callback_url\",\n        });\n    }\n    /**\n     * Get webhook url\n     * Retrieves the universal callback URL set for the client.\n     */\n    static getWebhookUrl(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/triggers/callback_url\",\n        });\n    }\n    /**\n     * Get logs\n     * Fetches logs based on connection and integration details.\n     */\n    static getTriggerLogs(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/triggers/logs\",\n        });\n    }\n    /**\n     * Get trigger info\n     * Get Trigger Info\n     */\n    static getTriggerInfoV2(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v2/triggers/{triggerName}\",\n        });\n    }\n}\nclass CliService {\n    /**\n     * Handle cli code exchange\n     */\n    static generateCliSession(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/cli/generate-cli-session\",\n        });\n    }\n    /**\n     * Get cli code\n     */\n    static getCliCode(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/cli/get-cli-code\",\n        });\n    }\n    /**\n     * Handle cli code verification\n     */\n    static verifyCliCode(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/cli/verify-cli-code\",\n        });\n    }\n}\nclass LogsService {\n    /**\n     * Get logs\n     * List logs\n     */\n    static getLogs(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).get({\n            ...options,\n            url: \"/api/v1/logs/\",\n        });\n    }\n    /**\n     * Post logs\n     * Add new logs\n     */\n    static postLogs(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v1/logs/\",\n        });\n    }\n}\nclass IntegrationsV2Service {\n    /**\n     * Search connector\n     * Search for a connector\n     */\n    static searchConnector(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v2/integrations/search-by-filters\",\n        });\n    }\n    /**\n     * Create connector\n     * Create a new connector\n     */\n    static createConnectorV2(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v2/integrations/create\",\n        });\n    }\n    /**\n     * Get or create connector\n     * Get or create a connector\n     */\n    static getOrCreateConnector(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v2/integrations/get-or-create\",\n        });\n    }\n}\nclass Connectionsv2Service {\n    /**\n     * Initiate connection\n     */\n    static initiateConnectionV2(options) {\n        var _a;\n        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client).post({\n            ...options,\n            url: \"/api/v2/connectedAccounts/initiateConnection\",\n        });\n    }\n}\n\nvar apiClient = {\n    logs: LogsService,\n    actionsV1: ActionsService,\n    actionsV2: ActionsService,\n    apiKeys: ApiKeysService,\n    clientAuth: ClientService,\n    cli: CliService,\n    appConnector: IntegrationsService,\n    appConnectorV2: IntegrationsV2Service,\n    apps: AppsService,\n    connections: ConnectionsService,\n    connectionsV2: Connectionsv2Service,\n    triggers: TriggersService,\n};\n\nconst ZActionGetParams = z.z.object({\n    actionName: z.z.string(),\n});\nconst ZGetListActionsParams = z.z.object({\n    apps: z.z.string().optional().describe(\"Comma separated app names\"),\n    actions: z.z.string().optional().describe(\"Comma separated action names\"),\n    tags: z.z.string().optional().describe(\"Comma separated tag names\"),\n    useCase: z.z.string().nullable().optional().describe(\"Use case name\"),\n    usecaseLimit: z.z.number().optional().describe(\"Limit for use case\"),\n    showAll: z.z.boolean().optional().describe(\"Show all actions\"),\n    showEnabledOnly: z.z.boolean().optional().describe(\"Show enabled actions\"),\n    filterImportantActions: z.z\n        .boolean()\n        .optional()\n        .describe(\"Filter important actions\"),\n    filterByAvailableApps: z.z\n        .boolean()\n        .optional()\n        .describe(\"Filter actions by available apps\"),\n});\nconst ZParameter = z.z.object({\n    name: z.z.string(),\n    in: z.z.enum([\"query\", \"header\"]),\n    value: z.z.string(),\n});\nconst ZCustomAuthParams = z.z.object({\n    base_url: z.z.string().optional(),\n    parameters: z.z.array(ZParameter),\n    body: z.z.record(z.z.unknown()).optional(),\n});\nconst ZExecuteParams = z.z.object({\n    actionName: z.z.string(),\n    requestBody: z.z.object({\n        connectedAccountId: z.z.string().optional(),\n        input: z.z.record(z.z.unknown()).optional(),\n        appName: z.z.string().optional(),\n        text: z.z.string().optional(),\n        authConfig: ZCustomAuthParams.optional(),\n        allowTracing: z.z.boolean().optional(),\n        sessionInfo: z.z\n            .object({\n            sessionId: z.z.string().optional(),\n        })\n            .optional(),\n    }),\n});\nconst ZFindActionEnumsByUseCaseParams = z.z.object({\n    apps: z.z.array(z.z.string()),\n    useCase: z.z.string(),\n    limit: z.z.number().optional(),\n    filterByAvailableApps: z.z.boolean().optional(),\n});\nconst ZExecuteRequestParams = z.z.object({\n    connectedAccountId: z.z.string(),\n    endpoint: z.z.string(),\n    method: z.z.enum([\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\"]),\n    parameters: z.z.array(ZParameter),\n    body: z.z.record(z.z.unknown()).optional(),\n});\n\nclass Actions {\n    constructor(backendClient, client) {\n        this.fileName = \"js/src/sdk/models/actions.ts\";\n        this.backendClient = backendClient;\n        this.client = client;\n    }\n    /**\n     * Retrieves details of a specific action in the Composio platform by providing its action name.\n     *\n     * The response includes the action's name, display name, description, input parameters, expected response, associated app information, and enabled status.\n     *\n     * @param {GetActionData} data The data for the request.\n     * @returns {Promise<ActionItemGetRes[0]>} A promise that resolves to the details of the action.\n     * @throws {ComposioError} If the request fails.\n     */\n    async get(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"get\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const parsedData = ZActionGetParams.parse(data);\n            const actions = await apiClient.actionsV2.getActionV2({\n                client: this.client,\n                path: {\n                    actionId: parsedData.actionName,\n                },\n            });\n            return actions.data;\n        }\n        catch (e) {\n            throw CEG.handleAllError(e);\n        }\n    }\n    /**\n     * Retrieves a list of all actions in the Composio platform.\n     *\n     * This method allows you to fetch a list of all the available actions. It supports pagination to handle large numbers of actions. The response includes an array of action objects, each containing information such as the action's name, display name, description, input parameters, expected response, associated app information, and enabled status.\n     *\n     * @param {GetListActionsData} data The data for the request.\n     * @returns {Promise<ActionsListResponseDTO>} A promise that resolves to the list of all actions.\n     * @throws {ComposioError} If the request fails.\n     */\n    async list(data = {}) {\n        var _a;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"list\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const parsedData = ZGetListActionsParams.parse(data);\n            let apps = parsedData.apps;\n            // Throw error if user has provided both filterByAvailableApps and apps\n            if ((data === null || data === void 0 ? void 0 : data.filterByAvailableApps) && (data === null || data === void 0 ? void 0 : data.apps)) {\n                throw new Error(\"Both filterByAvailableApps and apps cannot be provided together\");\n            }\n            if (data === null || data === void 0 ? void 0 : data.filterByAvailableApps) {\n                // Todo: To create a new API to get all integrated apps for a user instead of fetching all apps\n                const integratedApps = await apiClient.appConnector.listAllConnectors();\n                apps = (_a = integratedApps.data) === null || _a === void 0 ? void 0 : _a.items.map((app) => app === null || app === void 0 ? void 0 : app.appName).join(\",\");\n            }\n            const response = await apiClient.actionsV2.listActionsV2({\n                client: this.client,\n                query: {\n                    actions: data.actions,\n                    apps: apps,\n                    showAll: data.showAll,\n                    tags: data.tags,\n                    filterImportantActions: data.filterImportantActions,\n                    showEnabledOnly: data.showEnabledOnly,\n                    usecaseLimit: data.usecaseLimit || undefined,\n                    useCase: data.useCase,\n                },\n            });\n            return response.data;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Executes a specific action in the Composio platform.\n     * This doesn't execute the local action and is wrapper over backend. Try to call this method directly from toolset\n     *\n     * This method allows you to trigger the execution of an action by providing its name and the necessary input parameters. The request includes the connected account ID to identify the app connection to use for the action, and the input parameters required by the action. The response provides details about the execution status and the response data returned by the action.\n     *\n     * @param {ExecuteActionData} data The data for the request.\n     * @returns {Promise<ActionExecuteResponse>} A promise that resolves to the execution status and response data.\n     * @throws {ComposioError} If the request fails.\n     */\n    async execute(data) {\n        var _a, _b, _c;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"execute\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const parsedData = ZExecuteParams.parse(data);\n            const { data: res } = await apiClient.actionsV2.executeActionV2({\n                client: this.client,\n                body: {\n                    ...parsedData.requestBody,\n                    sessionInfo: {\n                        ...(((_a = parsedData.requestBody) === null || _a === void 0 ? void 0 : _a.sessionInfo) || {}),\n                        sessionId: ((_c = (_b = parsedData.requestBody) === null || _b === void 0 ? void 0 : _b.sessionInfo) === null || _c === void 0 ? void 0 : _c.sessionId) ||\n                            ComposioSDKContext.sessionId,\n                    },\n                    allowTracing: Boolean(ComposioSDKContext === null || ComposioSDKContext === void 0 ? void 0 : ComposioSDKContext.allowTracing),\n                },\n                path: {\n                    actionId: parsedData.actionName,\n                },\n            });\n            return res;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Finds all action enums by use case.\n     *\n     * @param {FindActionEnumsByUseCaseParam} data The data for the request.\n     * @returns {Promise<ActionFindActionEnumsByUseCaseRes>} A promise that resolves to the list of action enums.\n     * @throws {ComposioError} If the request fails.\n     */\n    async findActionEnumsByUseCase(data) {\n        var _a;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"findActionEnumsByUseCase\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const parsedData = ZFindActionEnumsByUseCaseParams.parse(data);\n            const { data: res } = await apiClient.actionsV2.advancedUseCaseSearch({\n                client: this.client,\n                query: {\n                    apps: (_a = parsedData.apps) === null || _a === void 0 ? void 0 : _a.join(\",\"),\n                    limit: parsedData.limit || undefined,\n                    filterByAvailableApps: parsedData.filterByAvailableApps,\n                },\n                body: {\n                    useCase: parsedData.useCase,\n                },\n            });\n            return res.items.map((item) => item.actions).flat() || [];\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Executes a action using Composio Proxy\n     *\n     * This method allows you to trigger the execution of an action by providing its name and the necessary input parameters. The request includes the connected account ID to identify the app connection to use for the action, and the input parameters required by the action. The response provides details about the execution status and the response data returned by the action.\n     *\n     * @param {ExecuteActionData} data The data for the request.\n     * @returns {Promise<ActionExecuteResponse>} A promise that resolves to the execution status and response data.\n     * @throws {ComposioError} If the request fails.\n     */\n    async executeRequest(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"executeRequest\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const parsedData = ZExecuteRequestParams.parse(data);\n            const { data: res } = await apiClient.actionsV2.executeWithHttpClient({\n                client: this.client,\n                body: {\n                    connectedAccountId: parsedData.connectedAccountId,\n                    endpoint: parsedData.endpoint,\n                    method: parsedData.method,\n                    parameters: parsedData.parameters,\n                    body: parsedData.body,\n                },\n            });\n            return res;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n}\n\nconst ZTriggerItemParam = z.z.object({\n    triggerId: z.z.string(),\n});\nconst ZActiveTriggersQuery = z.z.object({\n    triggerIds: z.z.string().optional(),\n    triggerNames: z.z.string().optional(),\n    connectedAccountIds: z.z.string().optional(),\n    integrationIds: z.z.string().optional(),\n    limit: z.z.number().optional(),\n    page: z.z.number().optional(),\n    showDisabled: z.z.boolean().optional(),\n});\nconst ZConnection = z.z.object({\n    id: z.z.string(),\n    integrationId: z.z.string(),\n    memberId: z.z.string(),\n    clientUniqueUserId: z.z.string(),\n    status: z.z.string(),\n    data: z.z.record(z.z.unknown()),\n    deleted: z.z.boolean().optional(),\n    enabled: z.z.boolean(),\n    labels: z.z.array(z.z.unknown()),\n    createdAt: z.z.string(),\n    updatedAt: z.z.string(),\n});\nz.z.object({\n    id: z.z.string(),\n    connectionId: z.z.string(),\n    triggerName: z.z.string(),\n    triggerData: z.z.string(),\n    triggerConfig: z.z.record(z.z.unknown()),\n    state: z.z.record(z.z.unknown()),\n    createdAt: z.z.string(),\n    updatedAt: z.z.string(),\n    disabledAt: z.z.string().nullable(),\n    disabledReason: z.z.string().nullable(),\n    connection: ZConnection,\n});\n\nclass ActiveTriggers {\n    constructor(backendClient, client) {\n        this.fileName = \"js/src/sdk/models/activeTriggers.ts\";\n        this.backendClient = backendClient;\n        this.client = client;\n    }\n    /** Missing type */\n    /**\n     * Retrieves details of a specific active trigger in the Composio platform by providing its trigger name.\n     *\n     * The response includes the trigger's name, description, input parameters, expected response, associated app information, and enabled status.\n     *\n     * @param {TriggerItemParam} data The data for the request.\n     * @returns {Promise<TriggerItemRes>} A promise that resolves to the details of the active trigger.\n     * @throws {ComposioError} If the request fails.\n     */\n    async get({ triggerId }) {\n        var _a;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"get\",\n            file: this.fileName,\n            params: { triggerId },\n        });\n        try {\n            const parsedData = ZTriggerItemParam.parse({ triggerId });\n            const { data } = await apiClient.triggers.getActiveTriggers({\n                client: this.client,\n                query: {\n                    triggerIds: `${parsedData.triggerId}`,\n                },\n            });\n            return (_a = data === null || data === void 0 ? void 0 : data.triggers) === null || _a === void 0 ? void 0 : _a[0];\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Retrieves a list of all active triggers in the Composio platform.\n     *\n     * This method allows you to fetch a list of all the available active triggers. It supports pagination to handle large numbers of triggers. The response includes an array of trigger objects, each containing information such as the trigger's name, description, input parameters, expected response, associated app information, and enabled status.\n     *\n     * @param {GetActiveTriggersData} data The data for the request.\n     * @returns {Promise<ZActiveTriggerItemRes[]>} A promise that resolves to the list of all active triggers.\n     * @throws {ComposioError} If the request fails.\n     */\n    async list(data = {}) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"list\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const parsedData = ZActiveTriggersQuery.parse(data);\n            const { data: response } = await apiClient.triggers.getActiveTriggers({\n                client: this.client,\n                query: parsedData,\n            });\n            return response === null || response === void 0 ? void 0 : response.triggers;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Enables the previously disabled trigger.\n     *\n     * @param {TriggerItemParam} data The data for the request.\n     * @returns {Promise<{status: string}>} A promise that resolves to the response of the enable request.\n     * @throws {ComposioError} If the request fails.\n     */\n    async enable(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"enable\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const parsedData = ZTriggerItemParam.parse(data);\n            await apiClient.triggers.switchTriggerInstanceStatus({\n                client: this.client,\n                path: { triggerId: parsedData.triggerId },\n                body: {\n                    enabled: true,\n                },\n            });\n            return {\n                status: \"success\",\n            };\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Disables the previously enabled trigger.\n     *\n     * @param {TriggerItemParam} data The data for the request.\n     * @returns {Promise<{status: string}>} A promise that resolves to the response of the disable request.\n     */\n    async disable(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"disable\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const parsedData = ZTriggerItemParam.parse(data);\n            await apiClient.triggers.switchTriggerInstanceStatus({\n                client: this.client,\n                path: parsedData,\n                body: {\n                    enabled: false,\n                },\n            });\n            return {\n                status: \"success\",\n            };\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n}\n\nz.z.object({\n    appKey: z.z.string(),\n});\nconst ZGetRequiredParams = z.z.object({\n    appId: z.z.string(),\n});\nconst ZGetRequiredParamsForAuthScheme = z.z.object({\n    appId: z.z.string(),\n    authScheme: z.z.string(),\n});\nconst ZRequiredParamsResponse = z.z.object({\n    required_fields: z.z.array(z.z.string()),\n    expected_from_user: z.z.array(z.z.string()),\n    optional_fields: z.z.array(z.z.string()),\n});\nz.z.object({\n    availableAuthSchemes: z.z.array(z.z.string()),\n    authSchemes: z.z.record(z.z.string(), ZRequiredParamsResponse),\n});\n\nclass Apps {\n    constructor(backendClient, client) {\n        this.fileName = \"js/src/sdk/models/apps.ts\";\n        this.backendClient = backendClient;\n        this.client = client;\n    }\n    /**\n     * Retrieves a list of all available apps in the Composio platform.\n     *\n     * This method allows clients to explore and discover the supported apps. It returns an array of app objects, each containing essential details such as the app's key, name, description, logo, categories, and unique identifier.\n     *\n     * @returns {Promise<AppItemListResponse[]>} A promise that resolves to the list of all apps.\n     * @throws {ComposioError} If the request fails.\n     */\n    async list() {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"list\",\n            file: this.fileName,\n            params: {},\n        });\n        try {\n            const { data } = await apiClient.apps.getApps({\n                client: this.client,\n                query: {\n                    additionalFields: \"auth_schemes\",\n                },\n            });\n            return (data === null || data === void 0 ? void 0 : data.items) || [];\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Retrieves details of a specific app in the Composio platform.\n     *\n     * This method allows clients to fetch detailed information about a specific app by providing its unique key. The response includes the app's name, key, status, description, logo, categories, authentication schemes, and other metadata.\n     *\n     * @param {AppGetDataParams} data The data for the request, including the app's unique key.\n     * @returns {Promise<AppItemResponse>} A promise that resolves to the details of the app.\n     * @throws {ComposioError} If the request fails.\n     */\n    async get(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"get\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const { data: response } = await apiClient.apps.getApp({\n                client: this.client,\n                path: {\n                    appName: data.appKey,\n                },\n            });\n            if (!response)\n                throw new Error(\"App not found\");\n            return response;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Retrieves the required parameters for a specific app in the Composio platform.\n     *\n     * This method allows clients to fetch the necessary parameters for a specific app by providing its unique key. The response includes the app's name, key, status, description, logo, categories, authentication schemes, and other metadata.\n     *\n     * @param {string} appId The unique key of the app.\n     * @returns {Promise<AppRequiredParamsFullResponse>} A promise that resolves to the required parameters for the app.\n     * @throws {ComposioError} If the request fails.\n     */\n    async getRequiredParams(appId) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getRequiredParams\",\n            file: this.fileName,\n            params: { appId },\n        });\n        try {\n            ZGetRequiredParams.parse({ appId });\n            const appData = await this.get({ appKey: appId });\n            if (!appData)\n                throw new Error(\"App not found\");\n            const authSchemes = appData.auth_schemes;\n            const availableAuthSchemes = authSchemes === null || authSchemes === void 0 ? void 0 : authSchemes.map((scheme) => scheme === null || scheme === void 0 ? void 0 : scheme.mode);\n            const authSchemesObject = {};\n            for (const scheme of authSchemes) {\n                const name = scheme.mode;\n                authSchemesObject[name] = {\n                    required_fields: [],\n                    optional_fields: [],\n                    expected_from_user: [],\n                };\n                scheme.fields.forEach((field) => {\n                    const isExpectedForIntegrationSetup = field.expected_from_customer === false;\n                    const isRequired = field.required;\n                    if (isExpectedForIntegrationSetup) {\n                        if (isRequired) {\n                            authSchemesObject[name].expected_from_user.push(field.name);\n                        }\n                        else {\n                            authSchemesObject[name].optional_fields.push(field.name);\n                        }\n                    }\n                    else {\n                        authSchemesObject[name].required_fields.push(field.name);\n                    }\n                });\n            }\n            return {\n                availableAuthSchemes,\n                authSchemes: authSchemesObject,\n            };\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Retrieves the required parameters for a specific authentication scheme of an app in the Composio platform.\n     *\n     * This method allows clients to fetch the necessary parameters for a specific authentication scheme of an app by providing its unique key and the authentication scheme.\n     *\n     * @param {AppGetRequiredParamsForAuthSchemeParam} data The data for the request, including the app's unique key and the authentication scheme.\n     * @returns {Promise<AppRequiredParamsResponse>} A promise that resolves to the required parameters for the authentication scheme.\n     * @throws {ComposioError} If the request fails.\n     */\n    async getRequiredParamsForAuthScheme({ appId, appName, authScheme, }) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getRequiredParamsForAuthScheme\",\n            file: this.fileName,\n            params: { appId, authScheme },\n        });\n        try {\n            const finalAppId = appName || appId;\n            ZGetRequiredParamsForAuthScheme.parse({ appId: finalAppId, authScheme });\n            const params = await this.getRequiredParams(finalAppId);\n            return params.authSchemes[authScheme];\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n}\n\nconst ZConnectionStatus = z.z.enum([\"INITIATED\", \"ACTIVE\", \"FAILED\"]);\nconst ZListConnectionsData = z.z.object({\n    appNames: z.z.string().optional(),\n    appUniqueKeys: z.z.string().array().optional(),\n    connectionId: z.z.string().optional(),\n    entityId: z.z.string().optional(),\n    integrationId: z.z.string().optional(),\n    labels: z.z.string().optional(),\n    page: z.z.number().optional(),\n    pageSize: z.z.number().optional(),\n    showActiveOnly: z.z.boolean().optional(),\n    showDisabled: z.z.boolean().optional(),\n    status: ZConnectionStatus.optional(),\n    user_uuid: z.z.string().optional(),\n});\nz.z.object({\n    connectionParams: z.z.record(z.z.string(), z.z.unknown()).optional(),\n    entityId: z.z.string().optional(),\n    labels: z.z.array(z.z.string()).optional(),\n    integrationId: z.z.string().optional(),\n    redirectUri: z.z.string().optional(),\n    authMode: ZAuthMode.optional(),\n    authConfig: z.z.record(z.z.string(), z.z.unknown()).optional(),\n    appName: z.z.string().optional(),\n});\nconst ZSaveUserAccessDataParam = z.z.object({\n    fieldInputs: z.z.record(z.z.string(), z.z.unknown()),\n    redirectUrl: z.z.string().optional(),\n    entityId: z.z.string().optional(),\n});\nconst ZSingleConnectionParams = z.z.object({\n    connectedAccountId: z.z.string(),\n});\nz.z.object({\n    data: z.z.record(z.z.string(), z.z.unknown()),\n    integrationId: z.z.string(),\n    redirectUri: z.z.string().optional(),\n    userUuid: z.z.string().optional(),\n    entityId: z.z.string().optional(),\n    labels: z.z.string().array().optional(),\n});\nconst ZReinitiateConnectionPayloadDto = z.z.object({\n    connectedAccountId: z.z.string(),\n    data: z.z.record(z.z.string(), z.z.unknown()),\n    redirectUri: z.z.string().optional(),\n});\n\n/**\n * Class representing connected accounts in the system.\n */\nclass ConnectedAccounts {\n    /**\n     * Initializes a new instance of the ConnectedAccounts class.\n     * @param {AxiosBackendClient} backendClient - The backend client instance.\n     */\n    constructor(backendClient, client) {\n        this.fileName = \"js/src/sdk/models/connectedAccounts.ts\";\n        this.backendClient = backendClient;\n        this.client = client;\n    }\n    /**\n     * List all connected accounts\n     * @param {ConnectedAccountsListData} data - The data for the connected accounts list\n     * @returns {Promise<ConnectedAccountListResponse>} - A promise that resolves to a list of connected accounts\n     */\n    async list(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"list\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const { appNames, appUniqueKeys } = ZListConnectionsData.parse(data);\n            const finalAppNames = appNames || (appUniqueKeys === null || appUniqueKeys === void 0 ? void 0 : appUniqueKeys.join(\",\"));\n            const res = await apiClient.connections.listConnections({\n                client: this.client,\n                query: {\n                    ...data,\n                    appNames: finalAppNames,\n                },\n            });\n            return res.data;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Get a single connected account\n     * @param {SingleConnectionParam} data - The data for the single connection\n     * @returns {Promise<SingleConnectedAccountResponse>} - A promise that resolves to a single connected account\n     */\n    async get(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"get\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            ZSingleConnectionParams.parse(data);\n            const res = await apiClient.connections.getConnection({\n                client: this.client,\n                path: data,\n                throwOnError: true,\n            });\n            return res.data;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Delete a single connected account\n     * @param {SingleConnectionParam} data - The data for the single connection\n     * @returns {Promise<SingleDeleteResponse>} - A promise that resolves when the connected account is deleted\n     */\n    async delete(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"delete\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            ZSingleConnectionParams.parse(data);\n            const res = await apiClient.connections.deleteConnection({\n                client: this.client,\n                path: data,\n                throwOnError: true,\n            });\n            return res.data;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Disable a single connected account\n     * @param {SingleConnectionParam} data - The data for the single connection\n     * @returns {Promise<ConnectionChangeResponse>} - A promise that resolves when the connected account is disabled\n     */\n    async disable(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"disable\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            ZSingleConnectionParams.parse(data);\n            const res = await apiClient.connections.disableConnection({\n                client: this.client,\n                path: data,\n                throwOnError: true,\n            });\n            return {\n                status: \"success\",\n                connectedAccountId: data.connectedAccountId,\n            };\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Enable a single connected account\n     * @param {SingleConnectionParam} data - The data for the single connection\n     * @returns {Promise<ConnectionChangeResponse>} - A promise that resolves when the connected account is enabled\n     */\n    async enable(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"enable\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            ZSingleConnectionParams.parse(data);\n            await apiClient.connections.enableConnection({\n                client: this.client,\n                path: {\n                    connectedAccountId: data.connectedAccountId,\n                },\n                throwOnError: true,\n            });\n            return {\n                status: \"success\",\n                connectedAccountId: data.connectedAccountId,\n            };\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Initiate a connection\n     * @param {InitiateConnectionDataReq} payload - The payload for the connection initiation\n     * @returns {Promise<ConnectionRequest>} - A promise that resolves to a connection request\n     */\n    async initiate(payload) {\n        var _a;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"initiate\",\n            file: this.fileName,\n            params: { payload },\n        });\n        try {\n            const connection = await apiClient.connectionsV2.initiateConnectionV2({\n                client: this.client,\n                body: {\n                    app: {\n                        uniqueKey: payload.appName,\n                        integrationId: payload.integrationId,\n                    },\n                    config: {\n                        name: payload.appName,\n                        useComposioAuth: !!payload.authMode && !!payload.authConfig,\n                        authScheme: payload.authMode,\n                        integrationSecrets: payload.authConfig,\n                    },\n                    connection: {\n                        entityId: payload.entityId,\n                        initiateData: payload.connectionParams || {},\n                        extra: {\n                            redirectURL: payload.redirectUri,\n                            labels: payload.labels || [],\n                        },\n                    },\n                },\n            });\n            const connectionResponse = (_a = connection === null || connection === void 0 ? void 0 : connection.data) === null || _a === void 0 ? void 0 : _a.connectionResponse;\n            return new ConnectionRequest({\n                connectionStatus: connectionResponse === null || connectionResponse === void 0 ? void 0 : connectionResponse.connectionStatus,\n                connectedAccountId: connectionResponse === null || connectionResponse === void 0 ? void 0 : connectionResponse.connectedAccountId,\n                redirectUri: connectionResponse === null || connectionResponse === void 0 ? void 0 : connectionResponse.redirectUrl,\n                client: this.client,\n            });\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Reinitiate a connection\n     * @param {ReinitiateConnectionPayload} data - The payload for the connection reinitialization\n     * @returns {Promise<ConnectionRequest>} - A promise that resolves to a connection request\n     */\n    async reinitiateConnection(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"reinitiateConnection\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            ZReinitiateConnectionPayloadDto.parse(data);\n            const connection = await apiClient.connections.reinitiateConnection({\n                client: this.client,\n                path: {\n                    connectedAccountId: data.connectedAccountId,\n                },\n                body: {\n                    data: data.data,\n                    redirectUri: data.redirectUri,\n                },\n            });\n            const res = connection.data;\n            return new ConnectionRequest({\n                connectionStatus: res === null || res === void 0 ? void 0 : res.connectionStatus,\n                connectedAccountId: res === null || res === void 0 ? void 0 : res.connectedAccountId,\n                redirectUri: res === null || res === void 0 ? void 0 : res.redirectUrl,\n                client: this.client,\n            });\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n}\nclass ConnectionRequest {\n    constructor({ connectionStatus, connectedAccountId, redirectUri, client, }) {\n        this.connectionStatus = connectionStatus;\n        this.connectedAccountId = connectedAccountId;\n        this.redirectUrl = redirectUri;\n        this.client = client;\n    }\n    async saveUserAccessData(data) {\n        try {\n            ZSaveUserAccessDataParam.parse(data);\n            const { data: connectedAccount } = await apiClient.connections.getConnection({\n                client: this.client,\n                path: { connectedAccountId: this.connectedAccountId },\n            });\n            if (!connectedAccount)\n                throw new Error(\"Connected account not found\");\n            return await apiClient.connections.initiateConnection({\n                client: this.client,\n                body: {\n                    integrationId: connectedAccount.integrationId,\n                    //@ts-ignore\n                    data: data.fieldInputs,\n                    redirectUri: data.redirectUrl,\n                    userUuid: data.entityId,\n                    entityId: data.entityId,\n                },\n            });\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Wait until the connection becomes active\n     * @param {number} timeout - The timeout for the connection to become active\n     * @returns {Promise<Connection>} - A promise that resolves to the connection\n     */\n    async waitUntilActive(timeout = 60) {\n        try {\n            const startTime = Date.now();\n            while (Date.now() - startTime < timeout * 1000) {\n                const connection = await apiClient.connections\n                    .getConnection({\n                    client: this.client,\n                    path: { connectedAccountId: this.connectedAccountId },\n                })\n                    .then((res) => res.data);\n                if (!connection)\n                    throw new Error(\"Connected account not found\");\n                if (connection.status === \"ACTIVE\") {\n                    return connection;\n                }\n                await new Promise((resolve) => setTimeout(resolve, 1000));\n            }\n            throw new Error(\"Connection did not become active within the timeout period.\");\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n}\n\nclass Integrations {\n    constructor(backendClient, client) {\n        this.fileName = \"js/src/sdk/models/integrations.ts\";\n        this.backendClient = backendClient;\n        this.client = client;\n    }\n    /**\n     * Retrieves a list of all available integrations in the Composio platform.\n     *\n     * This method allows clients to explore and discover the supported integrations. It returns an array of integration objects, each containing essential details such as the integration's key, name, description, logo, categories, and unique identifier.\n     *\n     * @returns {Promise<IntegrationListRes>} A promise that resolves to the list of all integrations.\n     * @throws {ComposioError} If the request fails.\n     */\n    async list(data = {}) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"list\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const { appName, appUniqueKey, ...rest } = ZListIntegrationsParams.parse(data);\n            const finalAppName = appName && appName.length > 0 ? appName : appUniqueKey;\n            const response = await apiClient.appConnector.listAllConnectors({\n                client: this.client,\n                query: { ...rest, appName: finalAppName },\n                throwOnError: true,\n            });\n            return response.data;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Retrieves details of a specific integration in the Composio platform by providing its integration name.\n     *\n     * The response includes the integration's name, display name, description, input parameters, expected response, associated app information, and enabled status.\n     *\n     * @param {IntegrationGetParam} data The data for the request.\n     * @returns {Promise<IntegrationGetResponse>} A promise that resolves to the details of the integration.\n     * @throws {ComposioError} If the request fails.\n     */\n    async get(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"get\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const response = await apiClient.appConnector.getConnectorInfo({\n                client: this.client,\n                path: data,\n                throwOnError: true,\n            });\n            return response.data;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Retrieves the required parameters for a specific integration's authentication scheme.\n     *\n     * This method is used to get the necessary input fields for a specific integration's authentication scheme.\n     *\n     * @param {IntegrationGetParam} data The data for the request.\n     * @returns {Promise<IntegrationRequiredParamsRes>} A promise that resolves to the required parameters for the integration's authentication scheme.\n     * @throws {ComposioError} If the request fails.\n     */\n    async getRequiredParams(data) {\n        var _a;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getRequiredParams\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            ZSingleIntegrationParams.parse(data);\n            const response = await apiClient.appConnector.getConnectorInfo({\n                client: this.client,\n                path: {\n                    integrationId: data.integrationId,\n                },\n                throwOnError: true,\n            });\n            return (_a = response.data) === null || _a === void 0 ? void 0 : _a.expectedInputFields;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Creates a new integration in the Composio platform.\n     *\n     * This method allows clients to create a new integration by providing the necessary details such as app ID, name, authentication mode, and configuration.\n     *\n     * @param {IntegrationCreateParams} data The data for the request.\n     * @returns {Promise<IntegrationGetResponse>} A promise that resolves to the created integration model.\n     * @throws {ComposioError} If the request fails.\n     */\n    async create(data) {\n        var _a;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"create\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            ZCreateIntegrationParams.parse(data);\n            let uniqueKey = data.appUniqueKey;\n            if (!uniqueKey) {\n                const apps = await apiClient.apps.getApps({ client: this.client });\n                const app = (_a = apps.data) === null || _a === void 0 ? void 0 : _a.items.find((app) => app.appId === data.appId);\n                uniqueKey = app.key;\n                if (!uniqueKey) {\n                    throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.COMMON.INVALID_PARAMS_PASSED, {\n                        message: `No app was found with the provided appId`,\n                        description: `Please provide an app unique key`,\n                    });\n                }\n            }\n            const response = await apiClient.appConnectorV2.createConnectorV2({\n                client: this.client,\n                body: {\n                    app: {\n                        uniqueKey: uniqueKey,\n                    },\n                    config: {\n                        useComposioAuth: data.useComposioAuth,\n                        name: data.name,\n                        authScheme: data.authScheme,\n                        integrationSecrets: data.authConfig,\n                    },\n                },\n                throwOnError: true,\n            });\n            const integrationId = response.data.integrationId;\n            return this.get({ integrationId });\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    async getOrCreateIntegration(data) {\n        var _a;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getOrCreateIntegration\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            ZCreateIntegrationParams.parse(data);\n            let uniqueKey = data.appUniqueKey;\n            if (!uniqueKey) {\n                const apps = await apiClient.apps.getApps({ client: this.client });\n                const app = (_a = apps.data) === null || _a === void 0 ? void 0 : _a.items.find((app) => app.appId === data.appId);\n                uniqueKey = app.key;\n                throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.COMMON.INVALID_PARAMS_PASSED, {\n                    message: `No app was found with the provided appId`,\n                    description: `Please provide an app unique key`,\n                });\n            }\n            const response = await apiClient.appConnectorV2.getOrCreateConnector({\n                client: this.client,\n                body: {\n                    app: {\n                        uniqueKey,\n                    },\n                    config: {\n                        useComposioAuth: data.useComposioAuth,\n                        name: data.name,\n                        authScheme: data.authScheme,\n                        integrationSecrets: data.authConfig,\n                    },\n                },\n                throwOnError: true,\n            });\n            const integrationId = response.data.integrationId;\n            return this.get({ integrationId });\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Deletes an existing integration in the Composio platform.\n     *\n     * This method allows clients to delete an existing integration by providing its integration ID.\n     *\n     * @param {IntegrationListData} data The data for the request.\n     * @returns {Promise<IntegrationDeleteResponse>} A promise that resolves to the deleted integration model.\n     * @throws {ComposioError} If the request fails.\n     */\n    async delete(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"delete\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            ZSingleIntegrationParams.parse(data);\n            const response = await apiClient.appConnector.deleteConnector({\n                client: this.client,\n                path: {\n                    integrationId: data.integrationId,\n                },\n                throwOnError: true,\n            });\n            return response.data;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n}\n\nconst PUSHER_KEY = process.env.CLIENT_PUSHER_KEY || \"8e1b8c92b7f8b2151c15\";\nconst PUSHER_CLUSTER = \"mt1\";\nclass PusherUtils {\n    static getPusherClient(baseURL, apiKey) {\n        if (!PusherUtils.pusherClient) {\n            // Dynamic import not available, using require for now\n            // TODO: Update to use dynamic import when available\n            // eslint-disable-next-line @typescript-eslint/no-require-imports\n            const PusherClient = __webpack_require__(/*! pusher-js */ \"(rsc)/./node_modules/pusher-js/dist/node/pusher.js\");\n            PusherUtils.pusherClient = new PusherClient(PUSHER_KEY, {\n                cluster: PUSHER_CLUSTER,\n                channelAuthorization: {\n                    endpoint: `${baseURL}/api/v1/client/auth/pusher_auth`,\n                    headers: {\n                        \"x-api-key\": apiKey,\n                    },\n                    transport: \"ajax\",\n                },\n            });\n        }\n        return PusherUtils.pusherClient;\n    }\n    /**\n     * Subscribes to a Pusher channel and binds an event to a callback function.\n     * @param {string} channelName - The name of the channel to subscribe to.\n     * @param {string} event - The event to bind to the channel.\n     * @param {(data: Record<string, unknown>) => void} fn - The callback function to execute when the event is triggered.\n     * @returns {PusherClient} The Pusher client instance.\n     */\n    static async subscribe(channelName, event, fn) {\n        try {\n            await PusherUtils.pusherClient.subscribe(channelName).bind(event, fn);\n        }\n        catch (error) {\n            logger.error(`Error subscribing to ${channelName} with event ${event}: ${error}`);\n        }\n    }\n    /**\n     * Unsubscribes from a Pusher channel.\n     * @param {string} channelName - The name of the channel to unsubscribe from.\n     * @returns {void}\n     */\n    static async unsubscribe(channelName) {\n        PusherUtils.pusherClient.unsubscribe(channelName);\n    }\n    /**\n     * Binds an event to a channel with support for chunked messages.\n     * @param {PusherClient} channel - The Pusher channel to bind the event to.\n     * @param {string} event - The event to bind to the channel.\n     * @param {(data: unknown) => void} callback - The callback function to execute when the event is triggered.\n     */\n    static bindWithChunking(channel, event, callback) {\n        channel.bind(event, callback); // Allow normal unchunked events.\n        // Now the chunked variation. Allows arbitrarily long messages.\n        const events = {};\n        channel.bind(\"chunked-\" + event, (data) => {\n            const typedData = data;\n            if (!events.hasOwnProperty(typedData.id)) {\n                events[typedData.id] = { chunks: [], receivedFinal: false };\n            }\n            const ev = events[typedData.id];\n            ev.chunks[typedData.index] = typedData.chunk;\n            if (typedData.final)\n                ev.receivedFinal = true;\n            if (ev.receivedFinal &&\n                ev.chunks.length === Object.keys(ev.chunks).length) {\n                callback(JSON.parse(ev.chunks.join(\"\")));\n                delete events[typedData.id];\n            }\n        });\n    }\n    /**\n     * Subscribes to a trigger channel for a client and handles chunked data.\n     * @param {string} clientId - The unique identifier for the client subscribing to the events.\n     * @param {(data: TriggerData) => void} fn - The callback function to execute when trigger data is received.\n     */\n    static triggerSubscribe(clientId, fn) {\n        const channel = PusherUtils.pusherClient.subscribe(`private-${clientId}_triggers`);\n        PusherUtils.bindWithChunking(channel, \"trigger_to_client\", fn);\n        logger.info(`Subscribed to triggers. You should start receiving events now.`);\n    }\n    static triggerUnsubscribe(clientId) {\n        PusherUtils.pusherClient.unsubscribe(`${clientId}_triggers`);\n    }\n}\n\nconst ZTriggerQuery = z.z.object({\n    triggerIds: z.z.array(z.z.string()).optional().describe(\"Trigger Instance IDs\"),\n    triggerInstanceIds: z.z\n        .array(z.z.string())\n        .optional()\n        .describe(\"Trigger Instance IDs\"),\n    appNames: z.z.array(z.z.string()).optional().describe(\"App Names in lowercase\"),\n    appUniqueKeys: z.z.array(z.z.string()).optional().describe(\"App Unique Keys\"),\n    connectedAccountIds: z.z\n        .array(z.z.string())\n        .optional()\n        .describe(\"Connected Account UUIDs\"),\n    integrationIds: z.z.array(z.z.string()).optional().describe(\"Integration IDs\"),\n    showEnabledOnly: z.z\n        .boolean()\n        .optional()\n        .describe(\"Show Enabled triggers only\"),\n});\nconst ZTriggerInstanceItems = z.z.object({\n    triggerInstanceId: z.z.string(),\n});\nconst ZTriggerSetupParam = z.z.object({\n    connectedAccountId: z.z.string(),\n    triggerName: z.z.string(),\n    config: z.z.record(z.z.unknown()).optional(),\n});\nz.z.object({\n    appName: z.z.string().optional(),\n    triggerId: z.z.string().optional(),\n    connectionId: z.z.string().optional(),\n    integrationId: z.z.string().optional(),\n    triggerName: z.z.string().optional(),\n    triggerData: z.z.string().optional(),\n    entityId: z.z.string().optional(),\n});\nconst ZSingleTriggerParam = z.z.object({\n    triggerId: z.z.string().optional(),\n    triggerName: z.z.string().optional(),\n});\nz.z.object({\n    triggerInstanceId: z.z.string().optional(),\n    triggerId: z.z.string().optional(),\n});\nz.z.object({\n    name: z.z.string(),\n    displayName: z.z.string(),\n    description: z.z.string(),\n    type: z.z.string(),\n    appId: z.z.string(),\n    appName: z.z.string(),\n    instructions: z.z.string().optional(),\n    payload: z.z.record(z.z.unknown()),\n    config: z.z.record(z.z.unknown()),\n});\n\nclass Triggers {\n    constructor(backendClient, client) {\n        this.trigger_to_client_event = \"trigger_to_client\";\n        this.fileName = \"js/src/sdk/models/triggers.ts\";\n        this.backendClient = backendClient;\n        this.client = client;\n    }\n    /**\n     * Retrieves a list of all triggers in the Composio platform.\n     *\n     * This method allows you to fetch a list of all the available triggers. It supports pagination to handle large numbers of triggers. The response includes an array of trigger objects, each containing information such as the trigger's name, description, input parameters, expected response, associated app information, and enabled status.\n     *\n     * @param {ListTriggersData} data The data for the request.\n     * @returns {Promise<ListTriggersResponse>} A promise that resolves to the list of all triggers.\n     * @throws {ComposioError} If the request fails.\n     */\n    async list(data = {}) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"list\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const { appNames, triggerIds, connectedAccountIds, integrationIds, showEnabledOnly, triggerInstanceIds, appUniqueKeys, } = ZTriggerQuery.parse(data);\n            const finalTriggerInstanceIds = triggerIds && triggerIds.length > 0 ? triggerIds : triggerInstanceIds;\n            const finalAppNames = appNames && appNames.length > 0 ? appNames : appUniqueKeys;\n            const { data: response } = await apiClient.triggers.listTriggers({\n                client: this.client,\n                query: {\n                    appNames: finalAppNames === null || finalAppNames === void 0 ? void 0 : finalAppNames.join(\",\"),\n                    triggerIds: finalTriggerInstanceIds === null || finalTriggerInstanceIds === void 0 ? void 0 : finalTriggerInstanceIds.join(\",\"),\n                    connectedAccountIds: connectedAccountIds === null || connectedAccountIds === void 0 ? void 0 : connectedAccountIds.join(\",\"),\n                    integrationIds: integrationIds === null || integrationIds === void 0 ? void 0 : integrationIds.join(\",\"),\n                    showEnabledOnly: showEnabledOnly || false,\n                },\n            });\n            if (!response || response.length === 0) {\n                throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.BACKEND.NOT_FOUND, {\n                    message: \"Trigger not found with the given params\",\n                    description: \"Trigger not found with the given params\",\n                    possibleFix: \"Pass a check if filter params are correct\",\n                });\n            }\n            return response;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Retrieves the configuration of a single trigger.\n     *\n     * @param {TriggerSingleParam} data The data for the request.\n     * @returns {Promise<TriggerSingleConfig>} A promise that resolves to the trigger configuration.\n     * @throws {ComposioError} If the request fails.\n     */\n    async get(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            client: this.client,\n            method: \"get\",\n            file: this.fileName,\n            params: { data },\n        });\n        return this.getTriggerInfo(data);\n    }\n    /**\n     * @deprecated use trigger.get instead\n     * Retrieves the configuration of a single trigger.\n     *\n     * @param {TriggerSingleParam} data The data for the request.\n     * @returns {Promise<TriggerSingleConfig>} A promise that resolves to the trigger configuration.\n     * @throws {ComposioError} If the request fails.\n     */\n    async getTriggerConfig(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getSingleTriggerConfig\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const parsedData = ZSingleTriggerParam.parse(data);\n            if (!parsedData.triggerName && !parsedData.triggerId) {\n                throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.COMMON.INVALID_PARAMS_PASSED, {\n                    message: \"Trigger name or trigger id is required\",\n                    description: \"Trigger name or trigger id is required\",\n                    possibleFix: \"Pass either triggerName or triggerId\",\n                });\n            }\n            const res = await apiClient.triggers.getTriggerInfoV2({\n                client: this.client,\n                path: {\n                    triggerName: parsedData.triggerName || parsedData.triggerId || \"\",\n                },\n            });\n            // Bad type inference\n            const triggerInfo = res.data;\n            if (!triggerInfo) {\n                throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.BACKEND.NOT_FOUND, {\n                    message: \"Trigger info not found\",\n                    description: \"Trigger info not found\",\n                    possibleFix: \"Pass a check if trigger exists\",\n                });\n            }\n            return { config: triggerInfo.config };\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Retrieves information about a single trigger.\n     *\n     * @param {TriggerSingleParam} data The data for the request.\n     * @returns {Promise<SingleTriggerRes>} A promise that resolves to the trigger information.\n     * @throws {ComposioError} If the request fails.\n     */\n    async getTriggerInfo(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getTriggerInfo\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const parsedData = ZSingleTriggerParam.parse(data);\n            const res = await apiClient.triggers.getTriggerInfoV2({\n                client: this.client,\n                path: {\n                    triggerName: parsedData.triggerName || parsedData.triggerId || \"\",\n                },\n            });\n            // Bad type inference\n            const trigger = res.data;\n            if (!trigger) {\n                throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.BACKEND.NOT_FOUND, {\n                    message: \"Trigger info not found\",\n                    description: \"Trigger info not found\",\n                    possibleFix: \"Pass a check if trigger exists\",\n                });\n            }\n            return trigger;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Setup a trigger for a connected account.\n     *\n     * @param {SetupTriggerData} data The data for the request.\n     * @returns {Promise<SetupTriggerResponse>} A promise that resolves to the setup trigger response.\n     * @throws {ComposioError} If the request fails.\n     */\n    async setup(params) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"setup\",\n            file: this.fileName,\n            params: params,\n        });\n        try {\n            const parsedData = ZTriggerSetupParam.parse(params);\n            const response = await apiClient.triggers.enableTrigger({\n                client: this.client,\n                path: {\n                    connectedAccountId: parsedData.connectedAccountId,\n                    triggerName: parsedData.triggerName,\n                },\n                body: {\n                    triggerConfig: parsedData.config || {},\n                },\n                throwOnError: true,\n            });\n            const { triggerId, status } = response.data;\n            return {\n                triggerId: triggerId,\n                triggerName: parsedData.triggerName,\n                status,\n                triggerInstanceId: triggerId,\n            };\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Enables a trigger for a connected account.\n     *\n     * @param {triggerId,triggerInstanceId} data The data for the request.\n     * @returns {Promise<boolean>} A promise that resolves to the response of the enable request.\n     * @throws {ComposioError} If the request fails.\n     */\n    async enable(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"enable\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const finalTriggerId = data.triggerId || data.triggerInstanceId;\n            if (!finalTriggerId) {\n                throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.COMMON.INVALID_PARAMS_PASSED, {\n                    message: \"Trigger ID is required\",\n                    description: \"Trigger ID is required\",\n                    possibleFix: \"Pass either triggerId or triggerInstanceId\",\n                });\n            }\n            await apiClient.triggers.switchTriggerInstanceStatus({\n                client: this.client,\n                path: {\n                    triggerId: finalTriggerId,\n                },\n                body: {\n                    enabled: true,\n                },\n            });\n            return {\n                status: \"success\",\n            };\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Disables a trigger for a connected account.\n     *\n     * @param {triggerId,triggerInstanceId} data The data for the request.\n     * @returns {Promise<boolean>} A promise that resolves to the response of the disable request.\n     * @throws {ComposioError} If the request fails.\n     */\n    async disable(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"disable\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const finalTriggerId = data.triggerId || data.triggerInstanceId;\n            if (!finalTriggerId) {\n                throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.COMMON.INVALID_PARAMS_PASSED, {\n                    message: \"Trigger ID is required\",\n                    description: \"Trigger ID is required\",\n                    possibleFix: \"Pass either triggerId or triggerInstanceId\",\n                });\n            }\n            await apiClient.triggers.switchTriggerInstanceStatus({\n                client: this.client,\n                path: {\n                    triggerId: finalTriggerId,\n                },\n                body: {\n                    enabled: false,\n                },\n            });\n            return {\n                status: \"success\",\n            };\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Deletes a trigger for a connected account.\n     *\n     * @param {TriggerInstanceItems} data The data for the request.\n     * @returns {Promise<boolean>} A promise that resolves to the response of the delete request.\n     * @throws {ComposioError} If the request fails.\n     */\n    async delete(data) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"delete\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const parsedData = ZTriggerInstanceItems.parse(data);\n            await apiClient.triggers.deleteTrigger({\n                client: this.client,\n                path: {\n                    triggerInstanceId: parsedData.triggerInstanceId,\n                },\n            });\n            return {\n                status: \"success\",\n            };\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    async subscribe(fn, filters = {}) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"subscribe\",\n            file: this.fileName,\n            params: { filters },\n        });\n        if (!fn)\n            throw new Error(\"Function is required for trigger subscription\");\n        const clientId = await this.backendClient.getClientId();\n        await PusherUtils.getPusherClient(this.backendClient.baseUrl, this.backendClient.apiKey);\n        const shouldSendTrigger = (data) => {\n            if (Object.keys(filters).length === 0)\n                return true;\n            else {\n                return ((!filters.appName ||\n                    data.appName.toLowerCase() === filters.appName.toLowerCase()) &&\n                    (!filters.triggerId ||\n                        data.metadata.id.toLowerCase() ===\n                            filters.triggerId.toLowerCase()) &&\n                    (!filters.connectionId ||\n                        data.metadata.connectionId.toLowerCase() ===\n                            filters.connectionId.toLowerCase()) &&\n                    (!filters.triggerName ||\n                        data.metadata.triggerName.toLowerCase() ===\n                            filters.triggerName.toLowerCase()) &&\n                    (!filters.entityId ||\n                        data.metadata.connection.clientUniqueUserId.toLowerCase() ===\n                            filters.entityId.toLowerCase()) &&\n                    (!filters.integrationId ||\n                        data.metadata.connection.integrationId.toLowerCase() ===\n                            filters.integrationId.toLowerCase()));\n            }\n        };\n        logger.debug(\"Subscribing to triggers\", filters);\n        PusherUtils.triggerSubscribe(clientId, (data) => {\n            if (shouldSendTrigger(data)) {\n                fn(data);\n            }\n        });\n    }\n    async unsubscribe() {\n        const clientId = await this.backendClient.getClientId();\n        PusherUtils.triggerUnsubscribe(clientId);\n    }\n}\n\nconst LABELS = {\n    PRIMARY: \"primary\",\n};\nclass Entity {\n    constructor(backendClient, id = \"default\") {\n        this.fileName = \"js/src/sdk/models/Entity.ts\";\n        this.backendClient = backendClient;\n        this.id = id;\n        this.triggerModel = new Triggers(this.backendClient, this.backendClient.instance);\n        this.actionsModel = new Actions(this.backendClient, this.backendClient.instance);\n        this.apps = new Apps(this.backendClient, this.backendClient.instance);\n        this.connectedAccounts = new ConnectedAccounts(this.backendClient, this.backendClient.instance);\n        this.integrations = new Integrations(this.backendClient, this.backendClient.instance);\n        this.activeTriggers = new ActiveTriggers(this.backendClient, this.backendClient.instance);\n    }\n    /**\n     * Executes an action for an entity.\n     *\n     * @param {string} actionName The name of the action to execute.\n     * @param {Record<string, unknown>} params The parameters for the action.\n     * @param {string} text The text to pass to the action. This can be to perform NLA execution\n     * @param {string} connectedAccountId The ID of the connected account to use for the action.\n     * @returns {Promise<ActionExecuteResponse>} A promise that resolves to the response from the action execution.\n     * @throws {ComposioError} If the request fails.\n     */\n    async execute({ actionName, params, text, connectedAccountId, }) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"execute\",\n            file: this.fileName,\n            params: { actionName, params, text, connectedAccountId },\n        });\n        try {\n            ZExecuteActionParams$1.parse({\n                actionName,\n                params,\n                text,\n                connectedAccountId,\n            });\n            const action = await this.actionsModel.get({\n                actionName: actionName,\n            });\n            if (!action) {\n                throw new Error(`Could not find action: ${actionName}`);\n            }\n            const app = await this.apps.get({\n                appKey: action.appKey,\n            });\n            if (app.no_auth) {\n                return this.actionsModel.execute({\n                    actionName: actionName,\n                    requestBody: {\n                        input: params,\n                        appName: action.appKey,\n                    },\n                });\n            }\n            const connectedAccount = await this.getConnection({\n                app: action.appKey,\n                connectedAccountId,\n            });\n            if (!connectedAccount) {\n                throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.SDK.NO_CONNECTED_ACCOUNT_FOUND, {\n                    message: `Could not find a connection with app='${action.appKey}' and entity='${this.id}'`,\n                    description: `Could not find a connection with app='${action.appKey}' and entity='${this.id}'`,\n                });\n            }\n            return this.actionsModel.execute({\n                actionName: actionName,\n                requestBody: {\n                    // @ts-ignore\n                    connectedAccountId: connectedAccount === null || connectedAccount === void 0 ? void 0 : connectedAccount.id,\n                    input: params,\n                    appName: action.appKey,\n                    text: text,\n                },\n            });\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Retrieves the required parameters for a specific authentication scheme of an app in the Composio platform.\n     *\n     * This method allows clients to fetch the necessary parameters for a specific authentication scheme of an app by providing its unique key and the authentication scheme.\n     *\n     * @param {ConnectionParams} data The data for the request, including the app's unique key and the authentication scheme.\n     * @returns {Promise<RequiredParamsResponse>} A promise that resolves to the required parameters for the authentication scheme.\n     * @throws {ComposioError} If the request fails.\n     */\n    async getConnection({ app, appName, connectedAccountId }) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getConnection\",\n            file: this.fileName,\n            params: { app, appName, connectedAccountId },\n        });\n        try {\n            const finalApp = appName || app;\n            ZConnectionParams.parse({ app: finalApp, connectedAccountId });\n            if (!finalApp && !connectedAccountId) {\n                throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.COMMON.INVALID_PARAMS_PASSED, {\n                    message: \"App or connectedAccountId is required\",\n                    description: \"App or connectedAccountId is required\",\n                });\n            }\n            if (connectedAccountId) {\n                return await this.connectedAccounts.get({\n                    connectedAccountId,\n                });\n            }\n            let latestAccount = null;\n            let latestCreationDate = null;\n            const connectedAccounts = await this.connectedAccounts.list({\n                user_uuid: this.id,\n            });\n            for (const account of connectedAccounts.items) {\n                if ((account === null || account === void 0 ? void 0 : account.labels) && (account === null || account === void 0 ? void 0 : account.labels.includes(LABELS.PRIMARY))) {\n                    latestAccount = account;\n                    break;\n                }\n            }\n            if (!latestAccount) {\n                for (const connectedAccount of connectedAccounts.items) {\n                    if ((finalApp === null || finalApp === void 0 ? void 0 : finalApp.toLocaleLowerCase()) ===\n                        connectedAccount.appName.toLocaleLowerCase()) {\n                        const creationDate = new Date(connectedAccount.createdAt);\n                        if ((!latestAccount ||\n                            (latestCreationDate && creationDate > latestCreationDate)) &&\n                            connectedAccount.status === \"ACTIVE\") {\n                            latestCreationDate = creationDate;\n                            latestAccount = connectedAccount;\n                        }\n                    }\n                }\n            }\n            if (!latestAccount) {\n                throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.SDK.NO_CONNECTED_ACCOUNT_FOUND, {\n                    message: `Could not find a connection with app='${finalApp}' and entity='${this.id}'`,\n                    description: `Could not find a connection with app='${finalApp}' and entity='${this.id}'`,\n                });\n            }\n            const connectedAccount = await this.connectedAccounts.get({\n                connectedAccountId: latestAccount.id,\n            });\n            if (!connectedAccount) {\n                throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.SDK.NO_CONNECTED_ACCOUNT_FOUND, {\n                    message: `Could not find a connection with app='${finalApp}' and entity='${this.id}'`,\n                    description: `Could not find a connection with app='${finalApp}' and entity='${this.id}'`,\n                });\n            }\n            return connectedAccount;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Retrieves the required parameters for a specific authentication scheme of an app in the Composio platform.\n     *\n     * This method allows clients to setup a trigger for an app by providing its unique key and the trigger name.\n     *\n     * @param {TriggerSubscribeParam} data The data for the request, including the app's unique key and the trigger name.\n     * @returns {Promise<RequiredParamsResponse>} A promise that resolves to the required parameters for the authentication scheme.\n     * @throws {ComposioError} If the request fails.\n     */\n    async setupTrigger({ app, appName, triggerName, config, }) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"setupTrigger\",\n            file: this.fileName,\n            params: { app, appName, triggerName, config },\n        });\n        try {\n            const finalApp = appName || app;\n            ZTriggerSubscribeParam.parse({ app: finalApp, triggerName, config });\n            const connectedAccount = await this.getConnection({ app: finalApp });\n            if (!connectedAccount) {\n                throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.SDK.NO_CONNECTED_ACCOUNT_FOUND, {\n                    message: `Could not find a connection with app='${finalApp}' and entity='${this.id}'`,\n                    description: `Could not find a connection with app='${finalApp}' and entity='${this.id}'`,\n                });\n            }\n            const trigger = await this.triggerModel.setup({\n                connectedAccountId: connectedAccount.id,\n                triggerName,\n                config,\n            });\n            return trigger;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Retrieves the required parameters for a specific authentication scheme of an app in the Composio platform.\n     *\n     * This method allows clients to disable a trigger by providing its trigger ID.\n     *\n     * @param {string} triggerId The ID of the trigger to disable.\n     * @returns {Promise<{ status: string }>} A promise that resolves to the status of the trigger disablement.\n     * @throws {ComposioError} If the request fails.\n     */\n    async disableTrigger(triggerId) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"disableTrigger\",\n            file: this.fileName,\n            params: { triggerId },\n        });\n        try {\n            await this.activeTriggers.disable({ triggerId: triggerId });\n            return { status: \"success\" };\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Retrieves all connections for an entity.\n     *\n     * @returns {Promise<ConnectionItem[]>} A promise that resolves to an array of connection items.\n     * @throws {ComposioError} If the request fails.\n     */\n    async getConnections() {\n        /**\n         * Get all connections for an entity.\n         */\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getConnections\",\n            file: this.fileName,\n            params: {},\n        });\n        try {\n            const connectedAccounts = await this.connectedAccounts.list({\n                user_uuid: this.id,\n            });\n            return connectedAccounts.items;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Retrieves all active triggers for an entity.\n     *\n     * @returns {Promise<ActiveTrigger[]>} A promise that resolves to an array of active triggers.\n     * @throws {ComposioError} If the request fails.\n     */\n    async getActiveTriggers() {\n        /**\n         * Get all active triggers for an entity.\n         */\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getActiveTriggers\",\n            file: this.fileName,\n            params: {},\n        });\n        try {\n            const connectedAccounts = await this.getConnections();\n            const activeTriggers = await this.activeTriggers.list({\n                // @ts-ignore\n                connectedAccountIds: connectedAccounts\n                    .map((account) => account.id)\n                    .join(\",\"),\n            });\n            return activeTriggers;\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Initiate a connection for an entity.\n     * @param {InitiateConnectionParams} data The data for the request, including the app's unique key and the authentication scheme.\n     * @returns {Promise<ConnectionRequest>} A promise that resolves to the connection request.\n     * @throws {ComposioError} If the request fails.\n     */\n    async initiateConnection(data) {\n        var _a, _b;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"initiateConnection\",\n            file: this.fileName,\n            params: { data },\n        });\n        try {\n            const { appName, authMode, authConfig, integrationId, connectionParams, redirectUri, labels, } = ZInitiateConnectionParams.parse(data);\n            // Initiate the connection process\n            return this.connectedAccounts.initiate({\n                authMode: authMode,\n                authConfig: authConfig,\n                integrationId: integrationId,\n                appName: appName,\n                entityId: this.id,\n                redirectUri: redirectUri || ((_a = data.config) === null || _a === void 0 ? void 0 : _a.redirectUrl) || \"\",\n                connectionParams: connectionParams,\n                labels: labels || ((_b = data.config) === null || _b === void 0 ? void 0 : _b.labels) || [],\n            });\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n}\n\nconst removeTrailingSlashIfExists = (str) => str.replace(/\\/+$/, \"\");\n\n/**\n * Class representing the details required to initialize and configure the API client.\n */\nclass AxiosBackendClient {\n    /**\n     * Creates an instance of apiClientDetails.\n     * @param {string} apiKey - The API key for client initialization.\n     * @param {string} baseUrl - The base URL for the API client.\n     * @param {string} runtime - The runtime environment identifier.\n     * @throws Will throw an error if the API key is not provided.\n     */\n    constructor(apiKey, baseUrl, runtime) {\n        this.runtime = runtime || \"\";\n        this.apiKey = apiKey;\n        this.baseUrl = removeTrailingSlashIfExists(baseUrl);\n        this.instance = clientAxios.createClient(clientAxios.createConfig({\n            baseURL: this.baseUrl,\n            headers: {\n                // common: {\n                \"X-API-KEY\": `${this.apiKey}`,\n                \"X-SOURCE\": \"js_sdk\",\n                \"X-RUNTIME\": this.runtime,\n                // }\n            },\n        }));\n        if (!apiKey) {\n            throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.COMMON.API_KEY_UNAVAILABLE, {\n                message: \"API key is not available\",\n                description: \"The API key required for authentication is not provided. You can get the API key from the Composio dashboard.\",\n                possibleFix: \"Please provide the API key in the constructor\",\n            });\n        }\n        // Validate baseUrl\n        if (!baseUrl.startsWith(\"http://\") && !baseUrl.startsWith(\"https://\")) {\n            throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.COMMON.BASE_URL_NOT_REACHABLE, {\n                message: `🔗 Base URL ${baseUrl} is not valid`,\n                description: \"The composio backend URL provided is not valid\",\n            });\n        }\n        this.initializeApiClient();\n    }\n    /**\n     * Retrieves the client ID from the user's information.\n     * @returns {Promise<string>} A promise that resolves to the client ID.\n     * @throws Will throw an error if the HTTP request fails.\n     */\n    async getClientId() {\n        var _a;\n        try {\n            const { data } = await apiClient.clientAuth.getUserInfo({\n                client: this.instance,\n            });\n            return ((_a = data === null || data === void 0 ? void 0 : data.client) === null || _a === void 0 ? void 0 : _a.id) || \"\";\n        }\n        catch (error) {\n            throw CEG.handleAllError(error);\n        }\n    }\n    /**\n     * Initializes the API client with the provided configuration.\n     * @private\n     */\n    initializeApiClient() {\n        this.instance.setConfig({\n            baseURL: removeTrailingSlashIfExists(this.baseUrl),\n            headers: {\n                common: {\n                    \"X-API-KEY\": `${this.apiKey}`,\n                    \"X-SOURCE\": \"js_sdk\",\n                    \"X-RUNTIME\": this.runtime,\n                },\n            },\n            throwOnError: true,\n        });\n        // setAxiosClientConfig(this.instance.instance);\n    }\n    getAxiosInstance() {\n        return this.instance.instance;\n    }\n}\n\n// File path helpers\nconst userDataPath = () => {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const path = __webpack_require__(/*! path */ \"path\");\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const os = __webpack_require__(/*! os */ \"os\");\n        return path.join(os.homedir(), COMPOSIO_DIR, USER_DATA_FILE_NAME);\n    }\n    catch (_error) {\n        return null;\n    }\n};\nconst getUserDataJson = () => {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const data = fs.readFileSync(userDataPath(), \"utf8\");\n        return JSON.parse(data);\n    }\n    catch (_error) {\n        return {};\n    }\n};\n// Axios configuration\nconst setAxiosClientConfig = (axiosClientInstance) => {\n    axiosClientInstance.interceptors.request.use((request) => {\n        var _a;\n        const body = request.data ? JSON.stringify(request.data) : \"\";\n        // set x-request-id header\n        const requestId = getUUID();\n        request.headers[\"x-request-id\"] = requestId;\n        request.metadata = {\n            startTime: Date.now(),\n            requestId,\n        };\n        logger.debug(`API Req [${(_a = request.method) === null || _a === void 0 ? void 0 : _a.toUpperCase()}] ${request.url}, x-request-id: ${requestId}`, {\n            ...(body && { body }),\n            query: request.params,\n        });\n        return request;\n    });\n    axiosClientInstance.interceptors.response.use((response) => {\n        var _a, _b, _c;\n        const method = (_a = response.config.method) === null || _a === void 0 ? void 0 : _a.toUpperCase();\n        const responseSize = Math.round(JSON.stringify(response.data).length / 1024);\n        const requestStartTime = (_b = response.config\n            .metadata) === null || _b === void 0 ? void 0 : _b.startTime;\n        const responseTime = requestStartTime ? Date.now() - requestStartTime : 0;\n        const status = response.status;\n        const requestId = response.headers[\"x-request-id\"] ||\n            ((_c = response.config.metadata) === null || _c === void 0 ? void 0 : _c.requestId);\n        // @ts-expect-error Error with metadata type\n        response[\"metadata\"] = {\n            responseTime,\n            responseSize,\n            requestId,\n        };\n        logger.debug(`API Res [${method}] ${response.config.url} - ${status} - ${responseSize} KB ${responseTime}ms`);\n        return response;\n    }, (error) => {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n        const requestStartTime = (_b = (_a = error.config) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.startTime;\n        const requestStartTimeId = (_d = (_c = error.config) === null || _c === void 0 ? void 0 : _c.metadata) === null || _d === void 0 ? void 0 : _d.requestId;\n        const responseTime = requestStartTime ? Date.now() - requestStartTime : 0;\n        const status = ((_e = error.response) === null || _e === void 0 ? void 0 : _e.status) || \"Unknown\";\n        const length = ((_g = JSON.stringify((_f = error.response) === null || _f === void 0 ? void 0 : _f.data)) === null || _g === void 0 ? void 0 : _g.length) || 0;\n        const responseSize = Math.round(length / 1024);\n        const requestId = ((_j = (_h = error.response) === null || _h === void 0 ? void 0 : _h.headers) === null || _j === void 0 ? void 0 : _j[\"x-request-id\"]) || requestStartTimeId;\n        const metadata = {\n            responseTime,\n            responseSize,\n            requestId,\n        };\n        // @ts-expect-error Error with metadata type\n        error.metadata = metadata;\n        logger.debug(`API Error [${status}] ${(_l = (_k = error.config) === null || _k === void 0 ? void 0 : _k.method) === null || _l === void 0 ? void 0 : _l.toUpperCase()} ${(_m = error.config) === null || _m === void 0 ? void 0 : _m.url} - ${status} - ${responseTime}ms, x-request-id: ${requestId}`, {\n            headers: (_o = error.response) === null || _o === void 0 ? void 0 : _o.headers,\n            data: (_p = error.response) === null || _p === void 0 ? void 0 : _p.data,\n            error: error.message,\n            responseTime,\n        });\n        return Promise.reject(error);\n    });\n};\n// Client configuration functions\nfunction getSDKConfig(baseUrl, apiKey) {\n    const userData = getUserDataJson();\n    const { api_key: apiKeyFromUserConfig, base_url: baseURLFromUserConfig } = userData;\n    const baseURLParsed = baseUrl ||\n        getEnvVariable(\"COMPOSIO_BASE_URL\") ||\n        baseURLFromUserConfig ||\n        DEFAULT_BASE_URL;\n    const apiKeyParsed = apiKey || getEnvVariable(\"COMPOSIO_API_KEY\") || apiKeyFromUserConfig || \"\";\n    return { baseURL: baseURLParsed, apiKey: apiKeyParsed };\n}\n\nconst isNewerVersion = (v1, v2) => {\n    const parts1 = v1.split(\".\").map(Number);\n    const parts2 = v2.split(\".\").map(Number);\n    for (let i = 0; i < 3; i++) {\n        if (parts1[i] > parts2[i])\n            return true;\n        if (parts1[i] < parts2[i])\n            return false;\n    }\n    return false;\n};\n\nclass Composio {\n    /**\n     * Initializes a new instance of the Composio class.\n     *\n     * @param {Object} config - Configuration object for the Composio SDK\n     * @param {string} [config.apiKey] - The API key for authenticating with the Composio backend. Can also be set locally in an environment variable.\n     * @param {string} [config.baseUrl] - The base URL for the Composio backend. By default, it is set to the production URL.\n     * @param {string} [config.runtime] - The runtime environment for the SDK.\n     * @param {boolean} [config.allowTracing] - Whether to allow tracing for the SDK.\n     */\n    constructor(config = {}) {\n        this.fileName = \"js/src/sdk/index.ts\";\n        // Parse the base URL and API key, falling back to environment variables or defaults if not provided\n        const { baseURL: baseURLParsed, apiKey: apiKeyParsed } = getSDKConfig(config === null || config === void 0 ? void 0 : config.baseUrl, config === null || config === void 0 ? void 0 : config.apiKey);\n        if (IS_DEVELOPMENT_OR_CI) {\n            logger.info(`Initializing Composio w API Key: [REDACTED] and baseURL: ${baseURLParsed}`);\n        }\n        ComposioSDKContext.apiKey = apiKeyParsed;\n        ComposioSDKContext.baseURL = baseURLParsed;\n        ComposioSDKContext.frameworkRuntime = config === null || config === void 0 ? void 0 : config.runtime;\n        ComposioSDKContext.composioVersion = COMPOSIO_VERSION;\n        ComposioSDKContext.allowTracing = config === null || config === void 0 ? void 0 : config.allowTracing;\n        // by default, generate a sessionId unless allowTracing is explicitly set to false\n        ComposioSDKContext.sessionId =\n            (config === null || config === void 0 ? void 0 : config.allowTracing) !== false ? getUUID() : undefined;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_INITIALIZED, {});\n        if (!apiKeyParsed) {\n            throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.COMMON.API_KEY_UNAVAILABLE, {\n                message: \"🔑 API Key is not provided\",\n                description: \"You need to provide it in the constructor or as an environment variable COMPOSIO_API_KEY\",\n                possibleFix: \"Please provide a valid API Key. You can get it from https://app.composio.dev/settings OR Check if you are passing it as an object in the constructor like - { apiKey: 'your-api-key' }\",\n            });\n        }\n        logger.info(`Initializing Composio w API Key: [REDACTED] and baseURL: ${baseURLParsed}`);\n        // Initialize the BackendClient with the parsed API key and base URL.\n        this.backendClient = new AxiosBackendClient(apiKeyParsed, baseURLParsed, config === null || config === void 0 ? void 0 : config.runtime);\n        setAxiosClientConfig(this.backendClient.getAxiosInstance());\n        // Instantiate models with dependencies as needed.\n        this.connectedAccounts = new ConnectedAccounts(this.backendClient, this.backendClient.instance);\n        this.triggers = new Triggers(this.backendClient, this.backendClient.instance);\n        this.apps = new Apps(this.backendClient, this.backendClient.instance);\n        this.actions = new Actions(this.backendClient, this.backendClient.instance);\n        this.integrations = new Integrations(this.backendClient, this.backendClient.instance);\n        this.activeTriggers = new ActiveTriggers(this.backendClient, this.backendClient.instance);\n        this.checkForLatestVersionFromNPM();\n    }\n    /**\n     * Checks for the latest version of the Composio SDK from NPM.\n     * If a newer version is available, it logs a warning to the console.\n     */\n    async checkForLatestVersionFromNPM() {\n        try {\n            const packageName = \"composio-core\";\n            const currentVersionFromPackageJson = COMPOSIO_VERSION;\n            const response = await axios.get(`https://registry.npmjs.org/${packageName}/latest`);\n            const latestVersion = response.data.version;\n            if (isNewerVersion(latestVersion, currentVersionFromPackageJson) &&\n                !IS_DEVELOPMENT_OR_CI) {\n                logger.info(`🚀 Upgrade available! Your composio-core version (${currentVersionFromPackageJson}) is behind. Latest version: ${latestVersion}.`);\n            }\n        }\n        catch (_error) {\n            // Ignore and do nothing\n        }\n    }\n    /**\n     * Retrieves an Entity instance associated with a given ID.\n     *\n     * @param {string} [id='default'] - The ID of the entity to retrieve.\n     * @returns {Entity} An instance of the Entity class.\n     */\n    getEntity(id = \"default\") {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getEntity\",\n            file: this.fileName,\n            params: { id },\n        });\n        return new Entity(this.backendClient, id);\n    }\n    async getExpectedParamsForUser(params) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getExpectedParamsForUser\",\n            file: this.fileName,\n            params: params,\n        });\n        const { app } = params;\n        let { integrationId } = params;\n        if (integrationId === null && app === null) {\n            throw new Error(\"Both `integration_id` and `app` cannot be None\");\n        }\n        if (!integrationId) {\n            try {\n                const integrations = await this.integrations.list({\n                    appName: app,\n                    showDisabled: false,\n                });\n                if (params.authScheme && integrations) {\n                    integrations.items = integrations.items.filter((integration) => integration.authScheme === params.authScheme);\n                }\n                integrationId = (_a = integrations === null || integrations === void 0 ? void 0 : integrations.items[0]) === null || _a === void 0 ? void 0 : _a.id;\n            }\n            catch (_) {\n                // do nothing\n            }\n        }\n        let integration = integrationId\n            ? await this.integrations.get({\n                integrationId: integrationId,\n            })\n            : undefined;\n        if (integration) {\n            return {\n                expectedInputFields: integration.expectedInputFields,\n                integrationId: integration.id,\n                authScheme: integration.authScheme,\n            };\n        }\n        const appInfo = await this.apps.get({\n            appKey: app.toLocaleLowerCase(),\n        });\n        const preferredAuthScheme = [\n            \"OAUTH2\",\n            \"OAUTH1\",\n            \"API_KEY\",\n            \"BASIC\",\n            \"BEARER_TOKEN\",\n            \"BASIC_WITH_JWT\",\n        ];\n        let schema = params.authScheme;\n        if (!schema) {\n            for (const scheme of preferredAuthScheme) {\n                if ((_b = appInfo.auth_schemes) === null || _b === void 0 ? void 0 : _b.map((_authScheme) => _authScheme.mode).includes(scheme)) {\n                    schema = scheme;\n                    break;\n                }\n            }\n        }\n        const hasTestConnectors = ((_d = (_c = appInfo.testConnectors) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;\n        const authSchemeFields = (_f = (_e = appInfo.auth_schemes) === null || _e === void 0 ? void 0 : _e.find((_authScheme) => _authScheme.mode === schema)) === null || _f === void 0 ? void 0 : _f.fields;\n        const requiredCustomerFields = (_h = (_g = authSchemeFields === null || authSchemeFields === void 0 ? void 0 : authSchemeFields.filter((field) => !field.expected_from_customer)) === null || _g === void 0 ? void 0 : _g.length) !== null && _h !== void 0 ? _h : 0;\n        const areNoFieldsRequiredForIntegration = hasTestConnectors || requiredCustomerFields === 0;\n        if (!areNoFieldsRequiredForIntegration) {\n            throw new Error(`No default credentials available for this app, please create new integration by going to app.composio.dev or through CLI - composio add ${appInfo.key}`);\n        }\n        const timestamp = new Date().toISOString().replace(/[-:.]/g, \"\");\n        const hasRelevantTestConnectors = params.authScheme\n            ? ((_k = (_j = appInfo.testConnectors) === null || _j === void 0 ? void 0 : _j.filter((connector) => connector.authScheme === params.authScheme)) === null || _k === void 0 ? void 0 : _k.length) > 0\n            : ((_l = appInfo.testConnectors) === null || _l === void 0 ? void 0 : _l.length) > 0;\n        if (hasRelevantTestConnectors) {\n            integration = await this.integrations.create({\n                appId: appInfo.appId,\n                name: `integration_${timestamp}`,\n                authScheme: schema,\n                authConfig: {},\n                useComposioAuth: true,\n            });\n            return {\n                expectedInputFields: integration === null || integration === void 0 ? void 0 : integration.expectedInputFields,\n                integrationId: integration === null || integration === void 0 ? void 0 : integration.id,\n                authScheme: integration === null || integration === void 0 ? void 0 : integration.authScheme,\n            };\n        }\n        if (!schema) {\n            throw new Error(`No supported auth scheme found for \\`${String(app)}\\`, ` +\n                \"Please create an integration and use the ID to \" +\n                \"get the expected parameters.\");\n        }\n        integration = await this.integrations.create({\n            appId: appInfo.appId,\n            name: `integration_${timestamp}`,\n            authScheme: schema,\n            authConfig: {},\n            useComposioAuth: false,\n        });\n        if (!integration) {\n            throw new Error(\"An unexpected error occurred while creating the integration, please create an integration manually and use its ID to get the expected parameters\");\n        }\n        return {\n            expectedInputFields: integration.expectedInputFields,\n            integrationId: integration.id,\n            authScheme: integration.authScheme,\n        };\n    }\n}\n\n/*\n    This is the schema for the raw action to be stored locally\n    Also returned by the API\n*/\nz.z.object({\n    name: z.z.string(),\n    display_name: z.z.string(),\n    description: z.z.string(),\n    appKey: z.z.string(),\n    appId: z.z.string(),\n    appName: z.z.string(),\n    logo: z.z.string(),\n    enabled: z.z.boolean(),\n    tags: z.z.array(z.z.string()),\n    parameters: z.z.object({\n        type: z.z.string(),\n        title: z.z.string(),\n        description: z.z.string(),\n        required: z.z.array(z.z.string()),\n        properties: z.z.record(z.z.any()),\n    }),\n    response: z.z.record(z.z.any()),\n    metadata: z.z.object({\n        name: z.z.string(),\n        toolName: z.z.string().optional(),\n    }),\n});\n/*\n    This is the schema for the params object in the ExecuteAction function\n*/\nconst ZExecuteActionParams = z.z.object({\n    action: z.z.string(),\n    params: z.z.record(z.z.any()).optional(),\n    entityId: z.z.string().optional(),\n    nlaText: z.z.string().optional(),\n    connectedAccountId: z.z.string().optional(),\n    config: z.z\n        .object({\n        labels: z.z.array(z.z.string()).optional(),\n    })\n        .optional(),\n});\nconst ZToolSchemaFilter = z.z.object({\n    actions: z.z.array(z.z.string()).optional(),\n    apps: z.z.array(z.z.string()).optional(),\n    tags: z.z.array(z.z.string()).optional(),\n    useCase: z.z.string().optional(),\n    useCaseLimit: z.z.number().optional(),\n    filterByAvailableApps: z.z.boolean().optional(),\n    integrationId: z.z.string().optional(),\n});\n\nclass ActionRegistry {\n    constructor(client) {\n        this.client = client;\n        this.customActions = new Map();\n    }\n    async createAction(options) {\n        var _a;\n        const { callback } = options;\n        if (typeof callback !== \"function\") {\n            throw new Error(\"Callback must be a function\");\n        }\n        if (!options.actionName) {\n            throw new Error(\"You must provide actionName for this action\");\n        }\n        if (!options.inputParams) {\n            options.inputParams = z.z.object({});\n        }\n        const params = options.inputParams;\n        const actionName = options.actionName || callback.name || \"\";\n        const paramsSchema = (await zodToJsonSchema.zodToJsonSchema(params, {\n            name: \"input\",\n        }));\n        const _params = paramsSchema.definitions.input.properties;\n        const composioSchema = {\n            name: actionName,\n            description: options.description,\n            parameters: {\n                title: actionName,\n                type: \"object\",\n                description: options.description,\n                required: paramsSchema.definitions.input.required || [],\n                properties: _params,\n            },\n            response: {\n                type: \"object\",\n                title: \"Response for \" + actionName,\n                properties: [],\n            },\n        };\n        this.customActions.set(((_a = options.actionName) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) || \"\", {\n            metadata: options,\n            schema: composioSchema,\n        });\n        return composioSchema;\n    }\n    async getActions({ actions, }) {\n        const actionsArr = [];\n        for (const name of actions) {\n            const lowerCaseName = name.toLowerCase();\n            if (this.customActions.has(lowerCaseName)) {\n                const action = this.customActions.get(lowerCaseName);\n                actionsArr.push(action.schema);\n            }\n        }\n        return actionsArr;\n    }\n    async getAllActions() {\n        return Array.from(this.customActions.values()).map((action) => action.schema);\n    }\n    async getToolName({ action, }) {\n        var _a;\n        if (!action) {\n            throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.COMMON.INVALID_PARAMS_PASSED, {\n                message: \"Action name is required\",\n                description: \"Please provide an action name to get its tool name\",\n            });\n        }\n        const lowerCaseName = action.toLowerCase();\n        return (_a = this.customActions.get(lowerCaseName)) === null || _a === void 0 ? void 0 : _a.metadata.toolName;\n    }\n    async executeAction(name, inputParams, metadata) {\n        const lowerCaseName = name.toLocaleLowerCase();\n        if (!this.customActions.has(lowerCaseName)) {\n            throw new Error(`Action with name ${name} does not exist`);\n        }\n        const action = this.customActions.get(lowerCaseName);\n        if (!action) {\n            throw new Error(`Action with name ${name} could not be retrieved`);\n        }\n        const { callback, toolName } = action.metadata || {};\n        let authCredentials = {};\n        if (toolName) {\n            const entity = await this.client.getEntity(metadata.entityId);\n            const connection = await entity.getConnection({\n                app: toolName,\n                connectedAccountId: metadata.connectionId,\n            });\n            if (!connection) {\n                throw new Error(`Connection with app name ${toolName} and entityId ${metadata.entityId} not found`);\n            }\n            const connectionParams = connection.connectionParams;\n            authCredentials = {\n                headers: connectionParams === null || connectionParams === void 0 ? void 0 : connectionParams.headers,\n                queryParams: connectionParams === null || connectionParams === void 0 ? void 0 : connectionParams.queryParams,\n                baseUrl: (connectionParams === null || connectionParams === void 0 ? void 0 : connectionParams.baseUrl) || (connectionParams === null || connectionParams === void 0 ? void 0 : connectionParams.base_url),\n            };\n        }\n        if (typeof callback !== \"function\") {\n            throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.COMMON.INVALID_PARAMS_PASSED, {\n                message: \"Callback must be a function\",\n                description: \"Please provide a valid callback function\",\n            });\n        }\n        const executeRequest = async (data) => {\n            try {\n                const { data: res } = await apiClient.actionsV2.executeWithHttpClient({\n                    client: this.client.backendClient.instance,\n                    body: {\n                        ...data,\n                        connectedAccountId: metadata === null || metadata === void 0 ? void 0 : metadata.connectionId,\n                    },\n                });\n                return res;\n            }\n            catch (error) {\n                throw CEG.handleAllError(error);\n            }\n        };\n        return await callback(inputParams, authCredentials, (data) => executeRequest(data));\n    }\n}\n\n/**\n * Gets the Composio directory.\n * @param createDirIfNotExists - Whether to create the directory if it doesn't exist.\n * @returns The path to the Composio directory.\n */\nconst getComposioDir = (createDirIfNotExists = false) => {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const os = __webpack_require__(/*! os */ \"os\");\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const path = __webpack_require__(/*! path */ \"path\");\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const composioDir = path.join(os.homedir(), COMPOSIO_DIR);\n        if (createDirIfNotExists && !fs.existsSync(composioDir)) {\n            fs.mkdirSync(composioDir, { recursive: true });\n        }\n        return composioDir;\n    }\n    catch (_error) {\n        return null;\n    }\n};\n/**\n * Gets the Composio temporary files directory.\n * @param createDirIfNotExists - Whether to create the directory if it doesn't exist.\n * @returns The path to the Composio temporary files directory.\n */\nconst getComposioTempFilesDir = (createDirIfNotExists = false) => {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const os = __webpack_require__(/*! os */ \"os\");\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const path = __webpack_require__(/*! path */ \"path\");\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const composioFilesDir = path.join(os.homedir(), COMPOSIO_DIR, TEMP_FILES_DIRECTORY_NAME);\n        if (createDirIfNotExists && !fs.existsSync(composioFilesDir)) {\n            fs.mkdirSync(composioFilesDir, { recursive: true });\n        }\n        return composioFilesDir;\n    }\n    catch (_error) {\n        return null;\n    }\n};\n/**\n * Saves a file to the Composio directory.\n * @param file - The name of the file to save.\n * @param content - The content of the file to save. Should be a string.\n * @param isTempFile - Whether the file is a temporary file.\n * @returns The path to the saved file.\n */\nconst saveFile = (file, content, isTempFile = false) => {\n    try {\n        const path = __webpack_require__(/*! path */ \"path\");\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const composioFilesDir = isTempFile\n            ? getComposioTempFilesDir(true)\n            : getComposioDir(true);\n        const filePath = path.join(composioFilesDir, path.basename(file));\n        if (Buffer.isBuffer(content)) {\n            fs.writeFileSync(filePath, content);\n        }\n        else {\n            fs.writeFileSync(filePath, content, \"utf8\");\n        }\n        return filePath;\n    }\n    catch (_error) {\n        return null;\n    }\n};\n\nconst readFileContent = async (path) => {\n    try {\n        const content = (__webpack_require__(/*! fs */ \"fs\").readFileSync)(path);\n        return {\n            content: content.toString(\"base64\"),\n            mimeType: \"application/octet-stream\",\n        };\n    }\n    catch (error) {\n        throw new Error(`Error reading file at ${path}: ${error}`);\n    }\n};\nconst readFileContentFromURL = async (path) => {\n    const response = await axios.get(path, {\n        responseType: \"arraybuffer\",\n    });\n    const content = Buffer.from(response.data);\n    const mimeType = response.headers[\"content-type\"] || \"application/octet-stream\";\n    return {\n        content: content.toString(\"base64\"),\n        mimeType,\n    };\n};\nconst uploadFileToS3 = async (content, actionName, appName, mimeType, client) => {\n    var _a;\n    const extension = mimeType.split(\"/\")[1] || \"bin\";\n    const response = await apiClient.actionsV2.createFileUploadUrl({\n        client: client,\n        body: {\n            action: actionName,\n            app: appName,\n            filename: `${actionName}_${Date.now()}.${extension}`,\n            mimetype: mimeType,\n            md5: crypto\n                .createHash(\"md5\")\n                .update(Buffer.from(content, \"base64\"))\n                .digest(\"hex\"),\n        },\n        path: {\n            fileType: \"request\",\n        },\n    });\n    const data = response.data;\n    const signedURL = data.url;\n    const s3key = data.key;\n    try {\n        const buffer = Buffer.from(content, \"base64\");\n        await axios.put(signedURL, buffer, {\n            headers: {\n                \"Content-Type\": mimeType,\n                \"Content-Length\": buffer.length,\n            },\n        });\n    }\n    catch (e) {\n        const error = e;\n        if (error instanceof axios.AxiosError && ((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) === 403) {\n            return signedURL;\n        }\n        throw new Error(`Error uploading file to S3: ${error}`);\n    }\n    return s3key;\n};\nconst getFileDataAfterUploadingToS3 = async (path, actionName, client) => {\n    const isURL = path.startsWith(\"http\");\n    const fileData = isURL\n        ? await readFileContentFromURL(path)\n        : await readFileContent(path);\n    const s3key = await uploadFileToS3(fileData.content, actionName, actionName, fileData.mimeType, client);\n    return {\n        name: pathModule.basename(path) || `${actionName}_${Date.now()}`,\n        mimetype: fileData.mimeType,\n        s3key: s3key,\n    };\n};\nconst downloadFileFromS3 = async ({ actionName, s3Url, mimeType, }) => {\n    const response = await axios.get(s3Url, {\n        responseType: \"arraybuffer\",\n    });\n    const extension = mimeType.split(\"/\")[1] || \"txt\";\n    const fileName = `${actionName}_${Date.now()}.${extension}`;\n    const filePath = saveFile(fileName, response.data, true);\n    return {\n        name: fileName,\n        mimeType: mimeType,\n        s3Key: s3Url,\n        filePath: filePath,\n    };\n};\n\nconst FILE_SUFFIX = \"_schema_parsed_file\";\nconst convertFileSchemaProperty = (key, property) => {\n    if (!property.file_uploadable) {\n        return property;\n    }\n    return {\n        keyName: `${key}${FILE_SUFFIX}`,\n        type: \"string\",\n        description: property.description,\n    };\n};\nconst processFileUpload = async (params, actionName, client) => {\n    const result = { ...params };\n    for (const [key, value] of Object.entries(result)) {\n        if (!key.endsWith(FILE_SUFFIX))\n            continue;\n        const originalKey = key.replace(FILE_SUFFIX, \"\");\n        const fileData = await getFileDataAfterUploadingToS3(value, actionName, client);\n        result[originalKey] = fileData;\n        delete result[key];\n    }\n    return result;\n};\nconst FILE_INPUT_PROCESSOR = async ({ params, actionName, client, }) => {\n    return processFileUpload(params, actionName, client);\n};\nconst FILE_DOWNLOADABLE_PROCESSOR = async ({ actionName, toolResponse, }) => {\n    const result = JSON.parse(JSON.stringify(toolResponse));\n    for (const [key, value] of Object.entries(toolResponse.data)) {\n        const fileData = value;\n        if (!(fileData === null || fileData === void 0 ? void 0 : fileData.s3url))\n            continue;\n        const downloadedFile = await downloadFileFromS3({\n            actionName,\n            s3Url: fileData.s3url,\n            mimeType: fileData.mimetype || \"application/txt\",\n        });\n        result.data[key] = {\n            uri: downloadedFile.filePath,\n            s3url: fileData.s3url,\n            mimeType: downloadedFile.mimeType,\n        };\n    }\n    return result;\n};\nconst FILE_SCHEMA_PROCESSOR = ({ toolSchema }) => {\n    const { properties, required: requiredProps = [] } = toolSchema.parameters;\n    const newProperties = { ...properties };\n    const newRequired = [...requiredProps];\n    for (const [key, property] of Object.entries(newProperties)) {\n        if (!property.file_uploadable)\n            continue;\n        const { type, keyName, description } = convertFileSchemaProperty(key, property);\n        newProperties[keyName] = {\n            title: property.title,\n            type,\n            description,\n        };\n        if (requiredProps.includes(key)) {\n            newRequired[newRequired.indexOf(key)] = keyName;\n        }\n        delete newProperties[key];\n    }\n    return {\n        ...toolSchema,\n        parameters: {\n            ...toolSchema.parameters,\n            properties: newProperties,\n            required: newRequired,\n        },\n    };\n};\n\nclass ComposioToolSet {\n    /**\n     * Creates a new instance of ComposioToolSet\n     * @param {Object} config - Configuration object\n     * @param {string|null} config.apiKey - API key for authentication\n     * @param {string|null} config.baseUrl - Base URL for API requests\n     * @param {string|null} config.runtime - Runtime environment\n     * @param {string} config.entityId - Entity ID for operations\n     * @param {Record<string, string>} config.connectedAccountIds - Map of app names to their connected account IDs\n     * @param {boolean} config.allowTracing - Whether to allow tracing for the SDK\n     */\n    constructor({ apiKey, baseUrl, runtime, entityId, connectedAccountIds, allowTracing, } = {}) {\n        this.entityId = \"default\";\n        this.connectedAccountIds = {};\n        this.internalProcessors = {\n            pre: [FILE_INPUT_PROCESSOR],\n            post: [FILE_DOWNLOADABLE_PROCESSOR],\n            schema: [FILE_SCHEMA_PROCESSOR],\n        };\n        this.userDefinedProcessors = {};\n        const clientApiKey = apiKey ||\n            getEnvVariable(\"COMPOSIO_API_KEY\") ||\n            getUserDataJson().api_key;\n        this.apiKey = clientApiKey;\n        this.client = new Composio({\n            apiKey: this.apiKey,\n            baseUrl: baseUrl || undefined,\n            runtime: runtime,\n            allowTracing: allowTracing || false,\n        });\n        this.runtime = runtime || null;\n        this.backendClient = this.client.backendClient;\n        this.connectedAccounts = this.client.connectedAccounts;\n        this.apps = this.client.apps;\n        this.actions = this.client.actions;\n        this.triggers = this.client.triggers;\n        this.integrations = this.client.integrations;\n        this.activeTriggers = this.client.activeTriggers;\n        this.connectedAccountIds = connectedAccountIds || {};\n        this.userActionRegistry = new ActionRegistry(this.client);\n        if (entityId && connectedAccountIds) {\n            logger.warn(\"When both entity and connectedAccountIds are provided, preference will be given to connectedAccountIds\");\n        }\n        if (connectedAccountIds) {\n            this.connectedAccountIds = connectedAccountIds;\n        }\n        if (entityId) {\n            this.entityId = entityId;\n        }\n    }\n    async getActionsSchema(filters = {}, _entityId) {\n        return this.getToolsSchema({\n            actions: filters.actions || [],\n        }, _entityId);\n    }\n    async getToolsSchema(filters, _entityId, _integrationId) {\n        var _a, _b;\n        const parsedFilters = ZToolSchemaFilter.parse(filters);\n        let actions = parsedFilters.actions;\n        if (_integrationId) {\n            const integration = await this.integrations.get({\n                integrationId: _integrationId,\n            });\n            if (integration === null || integration === void 0 ? void 0 : integration.limitedActions) {\n                if (!actions) {\n                    actions = [...integration.limitedActions];\n                }\n                else {\n                    const limitedActionsUppercase = integration.limitedActions.map((action) => action.toUpperCase());\n                    actions = actions.filter((action) => limitedActionsUppercase.includes(action.toUpperCase()));\n                }\n            }\n        }\n        const appActions = await this.client.actions.list({\n            apps: (_a = parsedFilters.apps) === null || _a === void 0 ? void 0 : _a.join(\",\"),\n            tags: (_b = parsedFilters.tags) === null || _b === void 0 ? void 0 : _b.join(\",\"),\n            useCase: parsedFilters.useCase,\n            actions: actions === null || actions === void 0 ? void 0 : actions.join(\",\"),\n            usecaseLimit: parsedFilters.useCaseLimit,\n            filterByAvailableApps: parsedFilters.filterByAvailableApps,\n        });\n        const customActions = await this.userActionRegistry.getAllActions();\n        const toolsWithCustomActions = customActions.filter((action) => {\n            const { name: actionName } = action || {};\n            return ((!filters.actions ||\n                filters.actions.some((name) => name.toLowerCase() === (actionName === null || actionName === void 0 ? void 0 : actionName.toLowerCase()))) &&\n                (!filters.tags ||\n                    filters.tags.some((tag) => tag.toLowerCase() === \"custom\")));\n        });\n        const toolsActions = [\n            ...((appActions === null || appActions === void 0 ? void 0 : appActions.items) || []),\n            ...toolsWithCustomActions,\n        ];\n        const allSchemaProcessor = [\n            ...this.internalProcessors.schema,\n            ...(this.userDefinedProcessors.schema\n                ? [this.userDefinedProcessors.schema]\n                : []),\n        ];\n        const processedTools = [];\n        // Iterate over the tools and process them\n        for (const tool of toolsActions) {\n            let schema = tool;\n            // Process the schema with all the processors\n            for (const processor of allSchemaProcessor) {\n                schema = await processor({\n                    actionName: schema === null || schema === void 0 ? void 0 : schema.name,\n                    toolSchema: schema,\n                });\n            }\n            processedTools.push(schema);\n        }\n        return processedTools;\n    }\n    async createAction(options) {\n        return this.userActionRegistry.createAction(options);\n    }\n    isCustomAction(action) {\n        return this.userActionRegistry\n            .getActions({ actions: [action] })\n            .then((actions) => actions.length > 0);\n    }\n    async getEntity(entityId) {\n        return this.client.getEntity(entityId);\n    }\n    async executeAction(functionParams) {\n        var _a;\n        const { action, params: inputParams = {}, entityId = this.entityId, nlaText = \"\", connectedAccountId, } = ZExecuteActionParams.parse({\n            action: functionParams.actionName || functionParams.action,\n            params: functionParams.params,\n            entityId: functionParams.entityId,\n            nlaText: functionParams.nlaText,\n            connectedAccountId: functionParams.connectedAccountId,\n        });\n        if (!entityId && !connectedAccountId) {\n            throw CEG.getCustomError(COMPOSIO_SDK_ERROR_CODES.SDK.NO_CONNECTED_ACCOUNT_FOUND, {\n                message: `No entityId or connectedAccountId provided`,\n                description: `Please provide either entityId or connectedAccountId`,\n            });\n        }\n        let params = inputParams || {};\n        const allInputProcessor = [\n            ...this.internalProcessors.pre,\n            ...(this.userDefinedProcessors.pre\n                ? [this.userDefinedProcessors.pre]\n                : []),\n        ];\n        for (const processor of allInputProcessor) {\n            params = await processor({\n                params: params,\n                actionName: action,\n                client: this.client.backendClient.instance,\n            });\n        }\n        // Custom actions are always executed in the host/local environment for JS SDK\n        if (await this.isCustomAction(action)) {\n            let accountId = connectedAccountId;\n            if (!accountId) {\n                const toolName = await this.userActionRegistry.getToolName({ action });\n                const connectedAccounts = await this.client.connectedAccounts.list({\n                    appNames: toolName,\n                    user_uuid: entityId,\n                    status: \"ACTIVE\",\n                    showActiveOnly: true,\n                });\n                accountId = (_a = connectedAccounts === null || connectedAccounts === void 0 ? void 0 : connectedAccounts.items[0]) === null || _a === void 0 ? void 0 : _a.id;\n            }\n            // allows the user to use custom actions and tools without a connected account\n            if (!accountId) {\n                logger.warn(\"No connected account found for the user. If your custom action requires a connected account, please double check if you have active accounts connected to it.\");\n            }\n            return this.userActionRegistry.executeAction(action, params, {\n                entityId: entityId,\n                connectionId: accountId,\n            });\n        }\n        const data = await this.client.getEntity(entityId).execute({\n            actionName: action,\n            params: params,\n            text: nlaText,\n            connectedAccountId: connectedAccountId,\n        });\n        return this.processResponse(data, {\n            action: action,\n            entityId: entityId,\n        });\n    }\n    async processResponse(data, meta) {\n        const allOutputProcessor = [\n            ...this.internalProcessors.post,\n            ...(this.userDefinedProcessors.post\n                ? [this.userDefinedProcessors.post]\n                : []),\n        ];\n        // Dirty way to avoid copy\n        let dataToReturn = JSON.parse(JSON.stringify(data));\n        for (const processor of allOutputProcessor) {\n            dataToReturn = await processor({\n                actionName: meta.action,\n                toolResponse: dataToReturn,\n            });\n        }\n        return dataToReturn;\n    }\n    async addSchemaProcessor(processor) {\n        if (typeof processor === \"function\") {\n            this.userDefinedProcessors.schema = processor;\n        }\n        else {\n            throw new Error(\"Invalid processor type\");\n        }\n        return this;\n    }\n    async addPreProcessor(processor) {\n        if (typeof processor === \"function\") {\n            this.userDefinedProcessors.pre = processor;\n        }\n        else {\n            throw new Error(\"Invalid processor type\");\n        }\n        return this;\n    }\n    async addPostProcessor(processor) {\n        if (typeof processor === \"function\") {\n            this.userDefinedProcessors.post = processor;\n        }\n        else {\n            throw new Error(\"Invalid processor type\");\n        }\n        return this;\n    }\n    async removePreProcessor() {\n        delete this.userDefinedProcessors.pre;\n    }\n    async removePostProcessor() {\n        delete this.userDefinedProcessors.post;\n    }\n    async removeSchemaProcessor() {\n        delete this.userDefinedProcessors.schema;\n    }\n}\n\nconst COMPOSIO_BASE_URL = \"https://backend.composio.dev\";\n\n/**\n * CloudflareToolSet provides integration with Cloudflare Workers AI\n * for executing AI tool calls and handling responses\n */\nclass CloudflareToolSet extends ComposioToolSet {\n    /**\n     * Initialize a new CloudflareToolSet instance\n     *\n     * @param config Configuration options including API key, base URL, entity ID and workspace config\n     */\n    constructor(config = {}) {\n        super({\n            apiKey: config.apiKey || null,\n            baseUrl: config.baseUrl || COMPOSIO_BASE_URL,\n            runtime: null,\n            entityId: config.entityId || CloudflareToolSet.DEFAULT_ENTITY_ID,\n            connectedAccountIds: config.connectedAccountIds,\n            allowTracing: config.allowTracing || false,\n        });\n        this.fileName = \"js/src/frameworks/cloudflare.ts\";\n    }\n    /**\n     * Retrieve available tools based on provided filters\n     *\n     * @param filters Optional filters for actions, apps, tags and use cases\n     * @returns Promise resolving to array of AI text generation tools\n     */\n    async getTools(filters) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getTools\",\n            file: this.fileName,\n            params: filters,\n        });\n        const actions = await this.getToolsSchema(filters);\n        return (actions.map((action) => {\n            // Format the action schema for Cloudflare Workers AI\n            const formattedSchema = {\n                name: action.name,\n                description: action.description,\n                parameters: action.parameters,\n            };\n            const tool = {\n                type: \"function\",\n                function: formattedSchema,\n            };\n            return tool;\n        }) || []);\n    }\n    /**\n     * Execute a single tool call\n     *\n     * @param tool The tool to execute with name and arguments\n     * @param entityId Optional entity ID to execute the tool for\n     * @returns Promise resolving to stringified tool execution result\n     */\n    async executeToolCall(tool, entityId = null) {\n        var _a, _b, _c;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"executeToolCall\",\n            file: this.fileName,\n            params: { tool, entityId },\n        });\n        const toolSchema = await this.getToolsSchema({\n            actions: [tool.name],\n        });\n        const appName = (_b = (_a = toolSchema[0]) === null || _a === void 0 ? void 0 : _a.appName) === null || _b === void 0 ? void 0 : _b.toLowerCase();\n        const connectedAccountId = appName && ((_c = this.connectedAccountIds) === null || _c === void 0 ? void 0 : _c[appName]);\n        return JSON.stringify(await this.executeAction({\n            action: tool.name,\n            params: typeof tool.arguments === \"string\"\n                ? JSON.parse(tool.arguments)\n                : tool.arguments,\n            entityId: entityId || this.entityId,\n            connectedAccountId: connectedAccountId,\n        }));\n    }\n    /**\n     * Handle tool calls from AI text generation output\n     *\n     * @param result The AI text generation output containing tool calls\n     * @param entityId Optional entity ID to execute the tools for\n     * @returns Promise resolving to array of tool execution results\n     */\n    async handleToolCall(result, entityId = null) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"handleToolCall\",\n            file: this.fileName,\n            params: { result, entityId },\n        });\n        const outputs = [];\n        if (\"tool_calls\" in result && Array.isArray(result.tool_calls)) {\n            for (const tool_call of result.tool_calls) {\n                if (tool_call.name) {\n                    outputs.push(await this.executeToolCall(tool_call, entityId));\n                }\n            }\n        }\n        return outputs;\n    }\n}\n// Class constants\nCloudflareToolSet.FRAMEWORK_NAME = \"cloudflare\";\nCloudflareToolSet.DEFAULT_ENTITY_ID = \"default\";\n\nclass LangchainToolSet extends ComposioToolSet {\n    constructor(config = {}) {\n        super({\n            apiKey: config.apiKey || null,\n            baseUrl: config.baseUrl || COMPOSIO_BASE_URL,\n            runtime: (config === null || config === void 0 ? void 0 : config.runtime) || LangchainToolSet.FRAMEWORK_NAME,\n            entityId: config.entityId || LangchainToolSet.DEFAULT_ENTITY_ID,\n            connectedAccountIds: config.connectedAccountIds,\n            allowTracing: config.allowTracing || false,\n        });\n        this.fileName = \"js/src/frameworks/langchain.ts\";\n    }\n    _wrapTool(schema, entityId = null) {\n        var _a;\n        const action = schema[\"name\"];\n        const description = schema[\"description\"];\n        const appName = (_a = schema[\"appName\"]) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n        const func = async (...kwargs) => {\n            var _a;\n            const connectedAccountId = appName && ((_a = this.connectedAccountIds) === null || _a === void 0 ? void 0 : _a[appName]);\n            return JSON.stringify(await this.executeAction({\n                action,\n                params: kwargs[0],\n                entityId: entityId || this.entityId,\n                connectedAccountId: connectedAccountId,\n            }));\n        };\n        const parameters = jsonSchemaToModel(schema[\"parameters\"]);\n        // @TODO: Add escriiption an other stuff here\n        return new tools.DynamicStructuredTool({\n            name: action,\n            description,\n            schema: parameters,\n            func: func,\n        });\n    }\n    async getTools(filters = {}, entityId = null) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getTools\",\n            file: this.fileName,\n            params: { filters, entityId },\n        });\n        const tools = await this.getToolsSchema(filters, entityId, filters.integrationId);\n        return tools.map((tool) => this._wrapTool(tool, entityId || this.entityId));\n    }\n}\n/**\n * Composio toolset for Langchain framework.\n *\n */\nLangchainToolSet.FRAMEWORK_NAME = \"langchain\";\nLangchainToolSet.DEFAULT_ENTITY_ID = \"default\";\n\nclass LangGraphToolSet extends LangchainToolSet {\n    constructor(config = {}) {\n        super({\n            apiKey: config.apiKey || null,\n            baseUrl: config.baseUrl || COMPOSIO_BASE_URL,\n            entityId: config.entityId || LangGraphToolSet.DEFAULT_ENTITY_ID,\n            runtime: LangGraphToolSet.FRAMEWORK_NAME,\n            connectedAccountIds: config.connectedAccountIds,\n            allowTracing: config.allowTracing || false,\n        });\n    }\n}\n/**\n * Composio toolset for Langgraph framework.\n *\n */\nLangGraphToolSet.FRAMEWORK_NAME = \"langGraph\";\nLangGraphToolSet.DEFAULT_ENTITY_ID = \"default\";\n\nclass OpenAIToolSet extends ComposioToolSet {\n    /**\n     * Composio toolset for OpenAI framework.\n     *\n     * Example:\n     * ```typescript\n     *\n     * ```\n     */\n    constructor(config = {}) {\n        super({\n            apiKey: config.apiKey || null,\n            baseUrl: config.baseUrl || COMPOSIO_BASE_URL,\n            runtime: OpenAIToolSet.FRAMEWORK_NAME,\n            entityId: config.entityId || OpenAIToolSet.DEFAULT_ENTITY_ID,\n            connectedAccountIds: config.connectedAccountIds,\n            allowTracing: config.allowTracing || false,\n        });\n        this.fileName = \"js/src/frameworks/openai.ts\";\n    }\n    async getTools(filters, entityId) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getTools\",\n            file: this.fileName,\n            params: filters,\n        });\n        const mainActions = await this.getToolsSchema(filters, entityId, filters.integrationId);\n        return (mainActions.map((action) => {\n            const formattedSchema = {\n                name: action.name,\n                description: action.description,\n                parameters: action.parameters,\n            };\n            const tool = {\n                type: \"function\",\n                function: formattedSchema,\n            };\n            return tool;\n        }) || []);\n    }\n    async executeToolCall(tool, entityId = null) {\n        var _a, _b, _c;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"executeToolCall\",\n            file: this.fileName,\n            params: { tool, entityId },\n        });\n        const toolSchema = await this.getToolsSchema({\n            actions: [tool.function.name],\n        });\n        const appName = (_b = (_a = toolSchema[0]) === null || _a === void 0 ? void 0 : _a.appName) === null || _b === void 0 ? void 0 : _b.toLowerCase();\n        const connectedAccountId = appName && ((_c = this.connectedAccountIds) === null || _c === void 0 ? void 0 : _c[appName]);\n        return JSON.stringify(await this.executeAction({\n            action: tool.function.name,\n            params: JSON.parse(tool.function.arguments),\n            entityId: entityId || this.entityId,\n            connectedAccountId: connectedAccountId,\n        }));\n    }\n    async handleToolCall(chatCompletion, entityId = null) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"handleToolCall\",\n            file: this.fileName,\n            params: { chatCompletion, entityId },\n        });\n        const outputs = [];\n        for (const message of chatCompletion.choices) {\n            if (message.message.tool_calls) {\n                outputs.push(await this.executeToolCall(message.message.tool_calls[0], entityId));\n            }\n        }\n        return outputs;\n    }\n    async handleAssistantMessage(run, entityId = null) {\n        var _a, _b;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"handleAssistantMessage\",\n            file: this.fileName,\n            params: { run, entityId },\n        });\n        const tool_calls = ((_b = (_a = run.required_action) === null || _a === void 0 ? void 0 : _a.submit_tool_outputs) === null || _b === void 0 ? void 0 : _b.tool_calls) || [];\n        const tool_outputs = await Promise.all(tool_calls.map(async (tool_call) => {\n            logger.debug(`Executing tool call with ID: ${tool_call.function.name} and parameters: ${JSON.stringify(tool_call.function.arguments)}`);\n            const tool_response = await this.executeToolCall(tool_call, entityId || this.entityId);\n            logger.debug(`Received tool response: ${JSON.stringify(tool_response)}`);\n            return {\n                tool_call_id: tool_call.id,\n                output: JSON.stringify(tool_response),\n            };\n        }));\n        return tool_outputs;\n    }\n    async *waitAndHandleAssistantStreamToolCalls(client, runStream, thread, entityId = null) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"waitAndHandleAssistantStreamToolCalls\",\n            file: this.fileName,\n            params: { client, runStream, thread, entityId },\n        });\n        let runId = null;\n        // Start processing the runStream events\n        for await (const event of runStream) {\n            yield event; // Yield each event from the stream as it arrives\n            if (event.event === \"thread.run.created\") {\n                const { id } = event.data;\n                runId = id;\n            }\n            if (!runId) {\n                continue;\n            }\n            // Handle the 'requires_action' event\n            if (event.event === \"thread.run.requires_action\") {\n                const toolOutputs = await this.handleAssistantMessage(event.data, entityId);\n                // Submit the tool outputs\n                await client.beta.threads.runs.submitToolOutputs(thread.id, runId, {\n                    tool_outputs: toolOutputs,\n                });\n            }\n            // Break if the run status becomes inactive\n            if ([\n                \"thread.run.completed\",\n                \"thread.run.failed\",\n                \"thread.run.cancelled\",\n                \"thread.run.expired\",\n            ].includes(event.event)) {\n                break;\n            }\n        }\n        if (!runId) {\n            throw new Error(\"No run ID found\");\n        }\n        // Handle any final actions after the stream ends\n        let finalRun = await client.beta.threads.runs.retrieve(thread.id, runId);\n        while ([\"queued\", \"in_progress\", \"requires_action\"].includes(finalRun.status)) {\n            if (finalRun.status === \"requires_action\") {\n                const toolOutputs = await this.handleAssistantMessage(finalRun, entityId);\n                // Submit tool outputs\n                finalRun = await client.beta.threads.runs.submitToolOutputs(thread.id, runId, {\n                    tool_outputs: toolOutputs,\n                });\n            }\n            else {\n                // Update the run status\n                finalRun = await client.beta.threads.runs.retrieve(thread.id, runId);\n                await new Promise((resolve) => setTimeout(resolve, 500)); // Wait before rechecking\n            }\n        }\n    }\n    async waitAndHandleAssistantToolCalls(client, run, thread, entityId = null) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"waitAndHandleAssistantToolCalls\",\n            file: this.fileName,\n            params: { client, run, thread, entityId },\n        });\n        while ([\"queued\", \"in_progress\", \"requires_action\"].includes(run.status)) {\n            logger.debug(`Current run status: ${run.status}`);\n            const tool_outputs = await this.handleAssistantMessage(run, entityId || this.entityId);\n            if (run.status === \"requires_action\") {\n                logger.debug(`Submitting tool outputs for run ID: ${run.id} in thread ID: ${thread.id}`);\n                run = await client.beta.threads.runs.submitToolOutputs(thread.id, run.id, {\n                    tool_outputs: tool_outputs,\n                });\n            }\n            else {\n                run = await client.beta.threads.runs.retrieve(thread.id, run.id);\n                await new Promise((resolve) => setTimeout(resolve, 500));\n            }\n        }\n        return run;\n    }\n}\nOpenAIToolSet.FRAMEWORK_NAME = \"openai\";\nOpenAIToolSet.DEFAULT_ENTITY_ID = \"default\";\n\nconst ZExecuteToolCallParams = z.z.object({\n    actions: z.z.array(z.z.string()).optional(),\n    apps: z.z.array(z.z.string()).optional(),\n    params: z.z.record(z.z.any()).optional(),\n    entityId: z.z.string().optional(),\n    useCase: z.z.string().optional(),\n    usecaseLimit: z.z.number().optional(),\n    connectedAccountId: z.z.string().optional(),\n    tags: z.z.array(z.z.string()).optional(),\n    filterByAvailableApps: z.z.boolean().optional().default(false),\n});\nclass VercelAIToolSet extends ComposioToolSet {\n    constructor(config = {}) {\n        super({\n            apiKey: config.apiKey || null,\n            baseUrl: config.baseUrl || null,\n            runtime: \"vercel-ai\",\n            entityId: config.entityId || \"default\",\n            connectedAccountIds: config.connectedAccountIds,\n            allowTracing: config.allowTracing || false,\n        });\n        this.fileName = \"js/src/frameworks/vercel.ts\";\n    }\n    generateVercelTool(schema, entityId = null) {\n        return ai.tool({\n            description: schema.description,\n            // @ts-ignore the type are JSONSchemV7. Internally it's resolved\n            parameters: ai.jsonSchema(schema.parameters),\n            execute: async (params) => {\n                return await this.executeToolCall({\n                    name: schema.name,\n                    arguments: JSON.stringify(params),\n                }, entityId || this.entityId);\n            },\n        });\n    }\n    // change this implementation\n    async getTools(filters, entityId = null) {\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"getTools\",\n            file: this.fileName,\n            params: filters,\n        });\n        const { apps, tags, useCase, usecaseLimit, filterByAvailableApps, actions, } = ZExecuteToolCallParams.parse(filters);\n        const actionsList = await this.getToolsSchema({\n            apps,\n            actions,\n            tags,\n            useCase,\n            useCaseLimit: usecaseLimit,\n            filterByAvailableApps,\n        }, entityId, filters.integrationId);\n        const tools = {};\n        actionsList.forEach((actionSchema) => {\n            tools[actionSchema.name] = this.generateVercelTool(actionSchema, entityId);\n        });\n        return tools;\n    }\n    async executeToolCall(tool, entityId = null) {\n        var _a, _b, _c;\n        TELEMETRY_LOGGER.manualTelemetry(TELEMETRY_EVENTS.SDK_METHOD_INVOKED, {\n            method: \"executeToolCall\",\n            file: this.fileName,\n            params: { tool, entityId },\n        });\n        const toolSchema = await this.getToolsSchema({\n            actions: [tool.name],\n        });\n        const appName = (_b = (_a = toolSchema[0]) === null || _a === void 0 ? void 0 : _a.appName) === null || _b === void 0 ? void 0 : _b.toLowerCase();\n        const connectedAccountId = appName && ((_c = this.connectedAccountIds) === null || _c === void 0 ? void 0 : _c[appName]);\n        return JSON.stringify(await this.executeAction({\n            action: tool.name,\n            params: typeof tool.arguments === \"string\"\n                ? JSON.parse(tool.arguments)\n                : tool.arguments,\n            entityId: entityId || this.entityId,\n            connectedAccountId: connectedAccountId,\n        }));\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-require-imports\nconst { APPS, ACTIONS } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/composio-core/constants.js\");\n\nexports.ACTIONS = ACTIONS;\nexports.APPS = APPS;\nexports.COMPOSIO_SDK_ERROR_CODES = COMPOSIO_SDK_ERROR_CODES;\nexports.CloudflareToolSet = CloudflareToolSet;\nexports.Composio = Composio;\nexports.ComposioError = ComposioError;\nexports.ComposioToolSet = ComposioToolSet;\nexports.ConnectionRequest = ConnectionRequest;\nexports.LangGraphToolSet = LangGraphToolSet;\nexports.LangchainToolSet = LangchainToolSet;\nexports.OpenAIToolSet = OpenAIToolSet;\nexports.VercelAIToolSet = VercelAIToolSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/composio-core/index.js\n");

/***/ })

};
;